{% set tourSteps = [] %}
{% for item in content %}
  {% set tourSteps = tourSteps|merge([{
    element: item.selector,
    title: item.title,
    content: item.content,
    class: item.class|split(' '),
    index: item.index,
    isSidebar: item.is_sidebar
  }]) %}
{% endfor %}

<div x-data="tourGuide({ 'tourSteps': '{{ tourSteps|json_encode|e('js') }}' })">
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('tourGuide', (config) => ({
        showTour: false,
        currentStep: 0,
        currentElement: null,
        currentClasses: [],
        mandatoryCSSClasses: ["rounded-lg", "bg-white", "relative", "z-50"],

        tourSteps: JSON.parse(config.tourSteps),
        buttons: {
            next: "{{ extra_fields.next_btn }}" || "Next",
            previous: "{{ extra_fields.prev_btn }}" || "Previous",
            skip: "{{ extra_fields.skip_btn }}" || "Skip",
            finish: "{{ extra_fields.end_btn }}" || "Finish",
        },

        init() {
            this.initTourGuide();
        },

        initTourGuide() {
            const timesShown = parseInt(localStorage.getItem('drupal.custom.tourguide') || '0', 10);
            if (timesShown >= 1) {
                return;
            }

            this.showTour = true;
            this.currentStep = 0;

            localStorage.setItem('drupal.custom.tourguide', (timesShown + 1).toString());

            this.showTour = true;
            this.currentStep = 0;
            this.$watch('currentStep', () => {
                setTimeout(() => this.positionTooltip(), 100);
            });

            this.$nextTick(() => this.positionTooltip());
        },

        nextStep() {
            if (this.currentStep < this.tourSteps.length - 1) {
                
                if (this.currentElement.classList.contains("z-50"))
                    this.currentElement.classList.remove("z-50");

                this.currentStep++; 
            } else {
                this.endTour();
            }
        },

        prevStep() {
            if (this.currentStep > 0) {
                if (this.currentElement.classList.contains("z-50"))
                    this.currentElement.classList.remove("z-50");
                this.currentStep--; 
            }
        },

        endTour() {
            this.showTour = false;
            this.currentStep = 0;

            const tooltip = document.querySelector('[data-tour-tooltip]');
            const tooltip_overlay = document.querySelector('.tooltip-overlay');

            if (tooltip) tooltip.remove();
            if (tooltip_overlay) tooltip_overlay.remove();
        },

        positionTooltip() {
            this.$nextTick(() => {
                if (!this.showTour) return;
                const step = this.tourSteps[this.currentStep];
                // Remove old tooltip and overlay
                document.querySelector('[data-tour-tooltip]')?.remove();
                document.querySelector('[data-tour-overlay]')?.remove();

                const oldTooltip = document.querySelector('[data-tour-tooltip]');
                if (oldTooltip) oldTooltip.remove();

                let target = null;

                // Support for class selectors with optional index
                if (step.element.startsWith('.')) {
                    const elements = document.querySelectorAll(step.element);
                    target = elements[step.index ?? elements.length - 1];
                } else {
                    target = document.querySelector(step.element);
                }

                this.currentElement = target;
                this.currentClasses = [...this.mandatoryCSSClasses, ...step.class].filter(Boolean);

                if (Array.isArray(step.class) && step.class.length > 0) {
                    this.currentClasses.forEach(className => {
                        if (!target.classList.contains(className)) {
                            target.classList.add(className);
                        }
                    });
                }

                if (target) {
                    const tooltip = this.createTourTooltip(step.isSidebar);
                    target.appendChild(tooltip);

                    // Overlay
                    const overlay = document.createElement('div');
                    overlay.setAttribute('data-tour-overlay', '');
                    overlay.className = 'tooltip-overlay fixed inset-0 bg-black bg-opacity-50 z-10';
                    document.body.appendChild(overlay);
                } else {
                    console.warn('Target element not found:', step.element);
                }
            });
        },

        createTourTooltip(isSidebar) {
            const wrapper = document.createElement('div');
            wrapper.setAttribute('data-tour-tooltip', '');
            wrapper.className = `mt-2 w-[max-content] absolute top-12 z-50 bg-white p-4 rounded-lg shadow-lg max-w-sm border border-gray-200 ${isSidebar ? 'left-0' : 'right-0'}`;

            const isLastStep = this.currentStep === this.tourSteps.length - 1;
            const title = this.tourSteps[this.currentStep].title;
            const content = this.tourSteps[this.currentStep].content;

            wrapper.innerHTML = `
                <h2 class="text-lg font-bold mb-1">${title}</h2>
                <p class="text-sm text-gray-600 mb-3">${content}</p>
                <div class="flex justify-between mt-6">
                    <button class="prev-btn px-3 py-1 bg-gray-200 text-sm rounded hover:bg-gray-300"
                        ${this.currentStep === 0 ? 'disabled style="opacity: 0.5; cursor: not-allowed;"' : ''}>
                        ${this.buttons.previous}
                    </button>
                    <div>
                        <button class="skip-btn px-3 py-1 border border-red-200 hover:bg-red-100 rounded-lg transition-all duration-200 text-red-500 text-sm">${this.buttons.skip}</button>
                        <button class="next-btn relative px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                            ${isLastStep ? this.buttons.finish : this.buttons.next}
                        </button>
                    </div>
                </div>
            `;

            // Attach event listeners directly to buttons
            wrapper.querySelector('.prev-btn')?.addEventListener('click', () => this.prevStep());
            wrapper.querySelector('.skip-btn')?.addEventListener('click', () => this.endTour());
            wrapper.querySelector('.next-btn')?.addEventListener('click', () => {
                if (isLastStep) this.endTour();
                else this.nextStep();
            });

            return wrapper;
        },

    }));
    });
    

</script>