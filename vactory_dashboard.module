<?php

/**
 * @file
 */

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Cache\Cache;
use Drupal\file\Entity\File;
use Drupal\block\Entity\Block;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Primary module hooks for vactory_dashboard module.
 */

/**
 * Implements hook_theme().
 */
function vactory_dashboard_theme($existing, $type, $theme, $path) {
  return [
    'vactory_dashboard_home' => [
      'variables' => [
        'total_pages' => NULL,
        'total_users' => NULL,
        'total_media' => NULL,
        'pages_modified_this_week' => NULL,
        'last_modified_pages' => NULL,
        'issues' => [],
        'projetID' => NULL,
        'error_message' => NULL,
      ],
      'template' => 'dashboard-home',
    ],
    'vactory_dashboard_users' => [
      'variables' => [
        'content' => NULL,
        'roles' => [],
      ],
      'template' => 'users/list',
    ],
    'vactory_dashboard_taxonomies' => [
      'variables' => [
        'taxonomy_vid' => NULL,
        'langs' => NULL,
        'default_lang' => NULL,
      ],
      'template' => 'taxonomy/list',
    ],
    'vactory_dashboard_media' => [
      'template' => 'media/dashboard-media',
      'variables' => [
        'media_types' => [],
        'permission_create_media' => NULL,
        'permission_delete_media' => NULL,
      ],
    ],
    'vactory_dashboard_ajoute_medias_files' => [
      'template' => 'media/dashboard-ajoute-medias-files',
      'variables' => [
        'allowed_extensions' => [],
        'max_size_bytes' => NULL,
      ],
    ],
    'vactory_dashboard_ajoute_medias_images' => [
      'template' => 'media/dashboard-ajoute-medias-images',
      'variables' => [
        'allowed_extensions' => [],
        'max_size_bytes' => NULL,
      ],
    ],
    'vactory_dashboard_ajoute_medias_upload_documents' => [
      'template' => 'media/dashboard-ajoute-medias-upload-documents',
      'variables' => [
        'allowed_extensions' => [],
      ],
    ],

    'vactory_dashboard_ajoute_medias_remote_video' => [
      'template' => 'media/dashboard-ajoute-medias-remote-video',

    ],

    'vactory_dashboard_ajoute_media' => [
      'template' => 'media/dashboard-ajoute-media',
      'variables' => [
        'media_types' => [],
      ],
    ],

    'vactory_dashboard_webform' => [
      'template' => 'webform/dashboard-webform',
      'variables' => [
        'id' => NULL,
      ],
    ],
    'vactory_dashboard_update_user' => [
      'template' => 'users/edit',
      'variables' => [
        'userId' => NULL,
        'roles' => [],
        'user_data' => [],
        'has_permission_edit_role' => NULL,
      ],
    ],
    'vactory_dashboard_submission' => [
      'template' => 'submission/dashboard-submission',
      'variables' => [
        'id' => NULL,
        'submission_id' => NULL,
      ],
    ],
    'vactory_dashboard_submission_edit' => [
      'template' => 'submission/dashboard-submission-edit',
      'variables' => [
        'id' => NULL,
        'submission_id' => NULL,
      ],
    ],
    'vactory_dashboard_translations' => [
      'variables' => [],
      'template' => 'translation/list',
    ],
    'vactory_dashboard_content_types' => [
      'template' => 'content-types/dashboard-content-types',
      'variables' => [
        'id' => NULL,
        'bundle_label' => NULL,
        'entity_queues' => NULL,
        'permissions' => NULL,
        'dynamic_exports' => NULL,
        'taxonomies' => NULL,
        'langs' => NULL,
        'has_metatag' => NULL,
      ],
    ],
    'vactory_dashboard_captcha' => [
      'template' => 'captcha/dashboard-captcha',
      'variables' => [
        'form' => NULL,
      ],
    ],
    'vactory_dashboard_languages' => [
      'template' => 'languages/dashboard-languages',
    ],
    'vactory_dashboard_sitemap' => [
      'template' => 'sitemap/dashboard-sitemap',
    ],
    'vactory_dashboard_shield' => [
      'template' => 'shield/dashboard-shield',
      'variables' => [
        'form' => NULL,
        'isShieldEnabled' => NULL,
      ],
    ],
    'vactory_dashboard_banner_blocks' => [
      'template' => 'blocks/banner-list',
      'variables' => [
        'blocks' => [],
        'block_types' => [],
      ],
    ],
    'vactory_dashboard_node_edit' => [
      'template' => 'node/edit',
      'variables' => [
        'node' => NULL,
        'type' => NULL,
        'alias' => NULL,
        'has_paragraphs_field' => NULL,
        'bundle' => NULL,
        'has_seo' => NULL,
        'bundle_label' => NULL,
        'fields' => NULL,
        'language' => NULL,
        'nid' => NULL,
        'label' => NULL,
        'changed' => NULL,
        'status' => NULL,
        'has_translation' => NULL,
        'node_default_lang' => NULL,
        'available_languages' => NULL,
        'permissions' => NULL,
        'isParagraphViewEnabled' => NULL,
        'isParagraphBlockEnabled' => NULL,
        'isParagraphTemplateEnabled' => NULL,
        'isParagraphMultipleEnabled' => NULL,
        'meta_tags' => NULL,
        'preview_url' => NULL,
      ],
    ],
    'vactory_dashboard_node_add' => [
      'template' => 'node/add',
      'variables' => [
        'type' => NULL,
        'has_paragraphs_field' => NULL,
        'isParagraphViewEnabled' => NULL,
        'isParagraphBlockEnabled' => NULL,
        'isParagraphTemplateEnabled' => NULL,
        'isParagraphMultipleEnabled' => NULL,
        'language' => NULL,
        'available_languages' => NULL,
        'node_default_lang' => NULL,
        'bundle' => NULL,
        'fields' => NULL,
        'bundle_label' => NULL,
      ],
    ],
    'vactory_dashboard_taxonomy_add' => [
      'template' => 'taxonomy/add-taxonomy',
      'variables' => [
        'vid' => NULL,
        'vocabulary_label' => NULL,
        'language' => NULL,
        'vocabulary_default_lang' => NULL,
        'available_languages' => NULL,
        'fields' => NULL,
      ],
    ],
    'vactory_dashboard_taxonomy_edit' => [
      'template' => 'taxonomy/edit-taxonomy',
      'variables' => [
        'vid' => NULL,
        'vocabulary_label' => NULL,
        'language' => NULL,
        'vocabulary_default_lang' => NULL,
        'available_languages' => NULL,
        'fields' => NULL,
        'term' => NULL,
        'tid' => NULL,
        'changed' => NULL,
        'status' => NULL,
        'has_translation' => NULL,
      ],
    ],
  ];
}

function getLogo() {
  $config = \Drupal::config('vactory_dashboard.global.settings');

  $file_url = NULL;
  $file_id = $config->get('image');

  if (!empty($file_id)) {
    $file = \Drupal\file\Entity\File::load(is_array($file_id) ? reset($file_id) : $file_id);
    if ($file) {
      $file_url = \Drupal::service('file_url_generator')
        ->generateAbsoluteString($file->getFileUri());
    }
  }
  return $file_url;
}

/**
 * Implements hook_preprocess().
 */
function vactory_dashboard_preprocess(&$variables) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    $data = [];
    $config = \Drupal::config('vactory_dashboard.settings');
    $data['redmineProjectId'] = $config->get('redmine_project_id');
    $data['logo'] = getLogo();

    $current_path = \Drupal::service('path.current')->getPath();
    $data['advanced_mode_url'] = get_admin_path($current_path);

    $data['homepage'] = getHomePage();

    [$links, $defaultlang, $currentlang] = getLanguages();
    $data['languages'] = $links;
    $data['default_language'] = $defaultlang;
    $data['current_language'] = $currentlang;

    $config = \Drupal::config('vactory_dashboard.global.settings');
    $data['pagespeed'] = $config->get('pagespeed_btn');

    $data['sidebar'] = getSidebarData();
  }

  $variables = array_merge($variables, $data);
}

/**
 * Get all taxonomy vocabularies with their names and vocabulary IDs.
 *
 * @return array
 *   An associative array of vocabularies with vid as key and name as value.
 */
function vactory_dashboard_get_taxonomy_vocabularies() {
  static $vocabularies = NULL;

  if ($vocabularies !== NULL) {
    return $vocabularies;
  }

  $vocabularies = [];

  $config = \Drupal::config('vactory_dashboard.global.settings');
  $selected_vocabularies = $config->get('dashboard_taxonomies');

  $config = \Drupal::config('vactory_dashboard.global.settings');
  $selected_vocabularies = $config->get('dashboard_taxonomies');

  // Load all taxonomy vocabularies.
  $vocabulary_entities = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->loadMultiple($selected_vocabularies);

  // Extract vocabulary names and IDs.
  foreach ($vocabulary_entities as $vocabulary) {
    $vocabularies[$vocabulary->id()] = $vocabulary->label();
  }

  return $vocabularies;
}

/**
 * Get the items of the main menu.
 *
 * @return array
 *   An array of menu items with their properties.
 */
function vactory_dashboard_get_main_menu_items() {
  static $menu_items = NULL;

  if ($menu_items !== NULL) {
    return $menu_items;
  }

  $menu_items = [];

  // Load the main menu.
  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Set the root level to 1 to get only top-level items.
  $parameters->setMinDepth(1);
  // Set maximum depth to 3 levels.
  $parameters->setMaxDepth(3);

  // Load the tree.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree into a renderable array.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);

  // Process menu items recursively.
  $menu_items = vactory_dashboard_process_menu_items($tree);

  return $menu_items;
}

/**
 * Helper function to process menu items recursively.
 *
 * @param array $items
 *   The menu items to process.
 *
 * @return array
 *   Processed menu items with their children.
 */
function vactory_dashboard_process_menu_items($items) {
  $processed_items = [];

  foreach ($items as $item) {
    $link = $item->link;
    $url = $link->getUrlObject();

    $menu_item = [
      'title' => $link->getTitle(),
      'url' => $url->toString(),
      'route_name' => $url->getRouteName(),
      'route_parameters' => $url->getRouteParameters(),
      'external' => $url->isExternal(),
      'attributes' => $link->getOptions(),
      'below' => [],
    ];

    // Process children if they exist.
    if (!empty($item->subtree)) {
      $menu_item['below'] = vactory_dashboard_process_menu_items($item->subtree);
    }

    $processed_items[] = $menu_item;
  }

  return $processed_items;
}

/**
 * Implements hook_toolbar().
 */
function vactory_dashboard_toolbar() {
  $items['dashboard'] = [
    '#weight' => 999,
    '#cache' => [
      'contexts' => ['route'],
    ],
    '#attached' => [
      'library' => [
        'vactory_dashboard/dashboard.icons.admin',
      ],
    ],
  ];
  // Show dashboard only on administration pages.
  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute()) {
    $items['dashboard']['#type'] = 'toolbar_item';
    $items['dashboard']['tab'] = [
      '#type' => 'inline_template',
      '#template' => '<a class="toolbar-icon toolbar-icon-dashboard trigger toolbar-item" href="{{ path("vactory_dashboard.home") }}">Dashboard <span style="display: inline-block; background-color: #ff4444; color: white; padding: 2px 6px; border-radius: 10px; font-size: 10px; margin-left: 5px; font-weight: bold;">BETA</span></a>',
    ];
  }
  return $items;
}

/**
 * Maps dashboard paths to native admin UI paths.
 */
function get_admin_path(string $path): string {
  $url = Url::fromRoute('system.admin')->toString();

  $route_match = \Drupal::routeMatch();

  switch ($route_match->getRouteName()) {
    // Page.
    case 'vactory_dashboard.vactory_page.edit':
      $id = $route_match->getParameter('id');
      $url = Url::fromRoute('entity.node.edit_form', ['node' => $id])
        ->toString();
      break;

    // Page - traduction.
    case 'vactory_dashboard.vactory_page.add.translation':
      $id = $route_match->getParameter('id');
      $url = Url::fromRoute('entity.node.content_translation_overview', ['node' => $id])
        ->toString();
      break;

    // Taxonomy.
    case 'vactory_dashboard.taxonomies':
      $vid = $route_match->getParameter('vid');
      $url = Url::fromRoute('entity.taxonomy_vocabulary.overview_form', ['taxonomy_vocabulary' => $vid])
        ->toString();
      break;

    // Content type.
    case 'vactory_dashboard.content_types':
      $bundle = $route_match->getParameter('bundle');
      $url = Url::fromRoute('system.admin_content', ['node_type' => $bundle], ['query' => ['type' => $bundle]])
        ->toString();
      break;

    // Content type - edit.
    case 'vactory_dashboard.node.edit':
      $nid = $route_match->getParameter('nid');
      $url = Url::fromRoute('entity.node.edit_form', ['node' => $nid])
        ->toString();
      break;

    // Content type - edit translation.
    case 'vactory_dashboard.node.translate':
      $nid = $route_match->getParameter('nid');
      $url = Url::fromRoute('entity.node.content_translation_overview', ['node' => $nid])
        ->toString();
      break;

    // Content type - add.
    case 'vactory_dashboard.node.add':
      $bundle = $route_match->getParameter('bundle');
      $url = Url::fromRoute('node.add', ['node_type' => $bundle])->toString();
      break;

    // Media.
    case 'vactory_dashboard.media':
      $url = Url::fromRoute('entity.media.collection')->toString();
      break;

    // Media - add in bulk.
    case 'vactory_dashboard_ajoute_medias_upload_documents':
      $url = Url::fromRoute('vactory_core.upload_documents_form')->toString();
      break;

    // Media - add single item.
    case 'vactory_dashboard_ajoute_media':
      $url = Url::fromRoute('entity.media.add_page')->toString();
      break;

    // Media - add file.
    case 'vactory_dashboard_ajoute_medias_files':
      $type_id = $route_match->getParameter('type_id');
      $url = Url::fromRoute('entity.media.add_form', ['media_type' => $type_id])
        ->toString();
      break;

    // Media - add image.
    case 'vactory_dashboard_ajoute_medias_images':
      $type_id = $route_match->getParameter('type_id');
      $url = Url::fromRoute('entity.media.add_form', ['media_type' => $type_id])
        ->toString();
      break;

    // Media - add remote video.
    case 'vactory_dashboard_ajoute_medias_remote_video':
      $type_id = $route_match->getParameter('type_id');
      $url = Url::fromRoute('entity.media.add_form', ['media_type' => $type_id])
        ->toString();
      break;

    // Users.
    case 'vactory_dashboard.users':
      $url = Url::fromRoute('entity.user.collection')->toString();
      break;

    // User.
    case 'vactory_dashboard_update_user':
      $userId = $route_match->getParameter('userId');
      $url = Url::fromRoute('entity.user.edit_form', ['user' => $userId])
        ->toString();
      break;

    // Formulaire.
    case 'vactory_dashboard.webform':
      $id = $route_match->getParameter('id');
      $url = Url::fromRoute('entity.webform.results_submissions', ['webform' => $id])
        ->toString();
      break;

    // Soumission.
    case 'vactory_dashboard.webform.submission':
      $id = $route_match->getParameter('id');
      $submission_id = $route_match->getParameter('submission_id');
      $url = Url::fromRoute('entity.webform_submission.canonical', [
        'webform' => $id,
        'webform_submission' => $submission_id,
      ])->toString();
      break;

    // Parametre - traduction.
    case 'vactory_dashboard.translations':
      $url = Url::fromRoute('locale.translate_page')->toString();
      break;

    // Parametre - captcha.
    case 'vactory_dashboard.settings.captcha':
      $url = Url::fromRoute('recaptcha.admin_settings_form')->toString();
      break;

    // Parametre - langue.
    case 'vactory_dashboard.settings.languages':
      $url = Url::fromRoute('entity.configurable_language.collection')
        ->toString();
      break;

    // Parametre - sitemap.
    case 'vactory_dashboard.settings.sitemaps':
      $url = Url::fromRoute('xmlsitemap.admin_search')->toString();
      break;

    // Parametre - shield.
    case 'vactory_dashboard.settings.shield':
      $url = Url::fromRoute('shield.settings')->toString();
      break;

    default:
      break;
  }

  return $url;
}

/**
 * Implements hook_form_alter().
 */
function vactory_dashboard_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $blocks_form = [
    'block_content_vactory_block_component_form',
  ];
  if (in_array($form_id, $blocks_form)) {
    $form['actions']['configure_block']['#access'] = FALSE;
    $defaultThemeName = \Drupal::config('system.theme')->get('default');

    $regions = system_region_list($defaultThemeName, REGIONS_VISIBLE);

    $region_options = [];
    foreach ($regions as $key => $region) {
      $region_options[$key] = $region;
    }

    $form['block_region'] = [
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Block region'),
      '#options' => $region_options,
      '#empty_option' => t('- Select a region -'),
      '#description' => t('Select which region to place the block into.'),
      '#weight' => 90,
    ];

    $form['visibility'] = [
      '#type' => 'vertical_tabs',
      '#title' => t('Visibility'),
      '#weight' => 91,
    ];

    $condition_ids = [
      'language',
      'request_path',
      'user_role',
      'entity_bundle:node',
    ];

    $manager = \Drupal::service('plugin.manager.condition');

    foreach ($condition_ids as $id) {
      if (!$manager->hasDefinition($id)) {
        continue;
      }

      $plugin = $manager->createInstance($id, []);

      $form[$id] = [
        '#type' => 'details',
        '#title' => $id === 'request_path' ? t("Pages") : $plugin->getPluginDefinition()['label'],
        '#group' => 'visibility',
        '#open' => FALSE,
        '#tree' => TRUE,
      ];
      $form[$id] += $plugin->buildConfigurationForm([], $form_state);
      if ($id !== 'request_path') {
        unset($form[$id]['negate']);
      }
    }
    $form['actions']['submit']['#submit'][] = 'save_block_content_as_block_with_visibility';
  }
}

/**
 * Save block content as a block with visibility.
 */
function save_block_content_as_block_with_visibility(&$form, FormStateInterface $form_state) {
  try {
    $block_content_id = $form_state->getValue('id');
    $uuid = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->load($block_content_id)
      ->uuid();

    $block = Block::create([
      'id' => $form_state->getValue('block_machine_name')[0]['value'],
      'plugin' => 'block_content:' . $uuid,
      'region' => $form_state->getValue('block_region'),
      'theme' => \Drupal::config('system.theme')->get('default'),
      'visibility' => [],
    ]);

    $roles = $form_state->getValue('user_role')['roles'] ?? [];
    $roles = array_filter($roles, function($role) {
      return $role != 0;
    });
    $block->setVisibilityConfig('user_role', [
      'id' => 'user_role',
      'roles' => $roles,
    ]);

    $block->setVisibilityConfig('request_path', [
        'id' => 'request_path',
        'pages' => $form_state->getValue('request_path')['pages'] ?? "",
        'negate' => $form_state->getValue('request_path')['negate'] ?? FALSE,
      ]
    );

    $langcodes = $form_state->getValue('language')['langcodes'] ?? [];
    $langcodes = array_filter($langcodes, function($langcode) {
      return $langcode != 0;
    });

    $block->setVisibilityConfig('language', [
        'id' => 'language',
        'langcodes' => $langcodes,
      ]
    );

    $bundles = $form_state->getValue('entity_bundle:node')['bundles'] ?? [];
    $bundles = array_filter($bundles, function($bundle) {
      return $bundle != 0;
    });
    $block->setVisibilityConfig('entity_bundle:node', [
        'id' => 'entity_bundle:node',
        'bundles' => $bundles,
      ]
    );

    $block->save();
  }
  catch (\Exception $exception) {
    \Drupal::logger('vactory_dashboard')->error($exception->getMessage());
    \Drupal::messenger()->addError($exception->getMessage());
  }
}

/**
 * Get information about the homepage node if available.
 *
 * @return array
 *   An array containing:
 *   - nid: Node ID of the homepage (0 if not a node).
 *   - url: URL to edit the homepage or fallback to its absolute URL.
 *   - title: Translated title of the homepage node (if any).
 */
function getHomePage(): array {
  $front_path = \Drupal::config('system.site')->get('page.front');

  // Get absolute URL of the front path.
  $absolute_url = Url::fromUserInput('/' . ltrim($front_path, '/'))
    ->setAbsolute()
    ->toString();

  // Resolve system path (e.g., /node/1).
  $system_path = \Drupal::service('path_alias.manager')
    ->getPathByAlias($front_path);

  // Check if the resolved path matches a node pattern.
  if (!preg_match('#^/(?:[a-z]{2}/)?node/(\d+)$#', $system_path, $matches)) {
    return [
      'nid' => 0,
      'url' => $absolute_url,
      'title' => NULL,
    ];
  }

  $nid = (int) $matches[1];
  $node = Node::load($nid);

  if (!$node) {
    return [
      'nid' => 0,
      'url' => $absolute_url,
      'title' => NULL,
    ];
  }

  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $translated_node = $node->hasTranslation($langcode)
    ? $node->getTranslation($langcode)
    : $node;

  return [
    'nid' => $nid,
    'url' => Url::fromRoute('vactory_dashboard.vactory_page.edit', ['id' => $nid])
      ->toString(),
    'title' => $translated_node->label(),
  ];
}

/**
 * Get languages.
 */
function getLanguages() {
  /** Get current path and turn it into a Url object */
  $current_path = Drupal::service('path.current')->getPath();
  $current_url = Url::fromUserInput($current_path);

  /** Language manager service */
  $language_manager = Drupal::service('language_manager');

  /** Get language switch links for current page */
  $language_links = $language_manager->getLanguageSwitchLinks('url', $current_url);

  /** Get all configured languages */
  $all_languages = $language_manager->getLanguages();

  /** Get default site language code */
  $default_lang = Drupal::service('language.default')->get();
  $default_langcode = $default_lang->getId();
  $default_langname = $default_lang->getName();

  $current_langname = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getName();

  $language_links = $language_manager->getLanguageSwitchLinks('url', $current_url);

  $links = [];

  foreach ($all_languages as $langcode => $language) {
    $translated_url = $language_links['links'][$langcode]['url'] ?? Url::fromUserInput($current_path, ['language' => $language]);

    $links[] = [
      'name' => $language->getName(),
      'id' => $langcode,
      'is_default' => $langcode === $default_langcode,
      'url' => $translated_url->toString(),
    ];
  }
  return [$links, $default_langname, $current_langname];
}

/**
 * Implémentation de hook_cron().
 */
function vactory_dashboard_cron() {
  \Drupal::logger('vactory_dashboard')
    ->notice('Début du cron personnalisé SSL.');

  $config = \Drupal::configFactory()
    ->getEditable('vactory_dashboard.ssl.settings');
  $last_check = $config->get('ssl_info_last_check') ?? 0;

  if (\Drupal::time()->getRequestTime() - $last_check < 30 * 24 * 60 * 60) {
    \Drupal::logger('vactory_dashboard')
      ->notice('Pas encore 30 jours depuis la dernière vérification SSL.');
    return;
  }

  try {
    \Drupal::logger('vactory_dashboard')
      ->notice('Lancement automatique du check SSL via cron.');

    /** @var \Drupal\vactory_dashboard\Service\SslService $ssl_service */
    $ssl_service = \Drupal::service('vactory_dashboard.ssl_service');
    $ssl_service->getSSLStatus();
  }
  catch (\Exception $e) {
    \Drupal::logger('vactory_dashboard')
      ->error('Erreur lors du cron SSL : @msg', [
        '@msg' => $e->getMessage(),
      ]);
  }

  \Drupal::logger('vactory_dashboard')->notice('Fin du cron personnalisé SSL.');
}

/*
 * Implements hook_user_login().
 */
function vactory_dashboard_user_login($account) {
  $current_user = \Drupal::currentUser();
  $request = \Drupal::request();

  // Skip if there's already a destination.
  if ($request->query->has('destination')) {
    return;
  }

  $config = \Drupal::config('vactory_dashboard.global.settings');
  $redirect_enabled = $config->get('dashboard');
  if(!$redirect_enabled) {
      return;
  }

  if ($current_user->hasPermission('access dashboard')) {
    $url = Url::fromRoute('vactory_dashboard.home');
    $request->query->set('destination', $url->toString());
  }
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function vactory_preprocess_menu_local_task(&$variables) {
  if (!\Drupal::moduleHandler()->moduleExists('vactory_dashboard')) {
    return;
  }

  $url = $variables['link']['#url'];
  
  if ($url instanceof Url && $url->getRouteName() == 'entity.node.edit_form') {
    $route_parameters = $url->getRouteParameters();
    $node_id = $route_parameters['node'] ?? null;

    $node = Node::load($node_id);
    $bundle = $node?->bundle();
    
    $new_url = Url::fromRoute('vactory_dashboard.node.edit', [
      'bundle' => $bundle,
      'nid' => $node_id
    ]);
    
    $variables['link']['#url'] = $new_url;
  }  
}

/**
 * Get sidebar data.
 */
function getSidebarData() {
  return [
    "vocabularies" => get_vocabularies(),
    "content_types" => get_content_types_items(),
    "forms" => get_forms(),
    "pages" => get_principal_menu_items(),
    "recaptchaInstalled" => is_module_installed("recaptcha"),
    "shieldInstalled" => is_module_installed("shield"),
    "advancedDashboard" => get_advanced_dashboard(),
    "support" => get_advanced_dashboard_support(),
  ];
}

/**
 * Get vocabularies with cache.
 */
function get_vocabularies() {
  // Internal static cache for this request.
  static $cache = [];

  $cid = 'vactory_dashboard.vocabularies';

  if (isset($cache[$cid])) {
    return $cache[$cid];
  }

  if ($cache_item = \Drupal::cache()->get($cid)) {
    $cache[$cid] = $cache_item->data;
    return $cache[$cid];
  }

  $vocabularies = vactory_dashboard_get_taxonomy_vocabularies();

  \Drupal::cache()->set(
    $cid,
    $vocabularies,
    Cache::PERMANENT,
    ['taxonomy_vocabulary_list']
  );

  $cache[$cid] = $vocabularies;

  return $vocabularies;
}

/**
 * Get content types items with cache.
 */
function get_content_types_items() {
  // Internal static cache for this request
  static $cache = [];

  $cid = 'vactory_dashboard.content_types_items';

  if (isset($cache[$cid])) {
    return ['items' => $cache[$cid]];
  }

  if ($cache_item = \Drupal::cache()->get($cid)) {
    $cache[$cid] = $cache_item->data;
    return ['items' => $cache[$cid]];
  }

  $config = \Drupal::config('vactory_dashboard.global.settings');
  $selected_content_types = $config->get('dashboard_content_types') ?? [];

  if (empty($selected_content_types)) {
    // Cache an empty array
    \Drupal::cache()->set($cid, [], Cache::PERMANENT);
    $cache[$cid] = [];
    return ['items' => []];
  }

  $types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple($selected_content_types);

  $content_types = [];
  foreach ($types as $type) {
    $content_types[] = [
      'id' => $type->id(),
      'label' => $type->label(),
      'path' => Url::fromRoute('vactory_dashboard.content_types', ['bundle' => $type->id()])
        ->toString(),
    ];
  }

  $cache_tags = [
    'config:vactory_dashboard.global.settings',
    'node_type_list',
  ];
  \Drupal::cache()->set($cid, $content_types, Cache::PERMANENT, $cache_tags);

  $cache[$cid] = $content_types;

  return ['items' => $content_types];
}

/**
 * Get webforms with caching.
 */
function get_forms() {
  static $cache = [];
  $cid = 'vactory_dashboard.forms';

  if (isset($cache[$cid])) {
    return ['items' => $cache[$cid]];
  }

  if ($cache_item = \Drupal::cache()->get($cid)) {
    $cache[$cid] = $cache_item->data;
    return ['items' => $cache[$cid]];
  }

  $config = \Drupal::config('vactory_dashboard.global.settings');
  $selected_webforms = $config->get('dashboard_webforms') ?? [];

  if (empty($selected_webforms)) {
    // Cache an empty array to avoid repeated queries
    \Drupal::cache()->set($cid, [], Cache::PERMANENT);
    $cache[$cid] = [];
    return ['items' => []];
  }

  $webform_entities = \Drupal::entityTypeManager()->getStorage('webform')
    ->loadMultiple($selected_webforms);

  $forms = [];
  foreach ($webform_entities as $webform) {
    $forms[] = [
      'id' => $webform->id(),
      'title' => $webform->label(),
      'path' => Url::fromRoute('vactory_dashboard.webform', ['id' => $webform->id()])
        ->toString(),
    ];
  }

  \Drupal::cache()->set($cid, $forms, Cache::PERMANENT);

  $cache[$cid] = $forms;

  return ['items' => $forms];
}

/**
 * Get principal menu items with cache.
 */
function get_principal_menu_items() {
  static $cache = [];
  $cid = 'vactory_dashboard.principal_menu_items';

  if (isset($cache[$cid])) {
    return $cache[$cid];
  }

  if ($cache_item = \Drupal::cache()->get($cid)) {
    $cache[$cid] = $cache_item->data;
    return $cache[$cid];
  }

  $menu_id = \Drupal::config('vactory_dashboard.global.settings')->get('menu_id') ?? 'main';

  $parameters = new MenuTreeParameters();
  $parameters->onlyEnabledLinks()->setMaxDepth(2)->setMinDepth(1);
  $menu_tree_service = \Drupal::menuTree();
  $tree = $menu_tree_service->load($menu_id, $parameters);

  if (empty($tree)) {
    $response = [
      'items' => [],
      'total_pages' => 1, // Start with homepage
    ];
    $cache[$cid] = $response;
    \Drupal::cache()->set($cid, $response, Cache::PERMANENT, ['config:vactory_dashboard.menu.settings', 'menu:' . $menu_id]);
    return $response;
  }

  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
  ];
  $tree = $menu_tree_service->transform($tree, $manipulators);
  $menu = $menu_tree_service->build($tree);

  $items = [];
  extract_menu_items($menu['#items'], $items);

  // Recursive count function like your JS getTotalPagesCount
  $countPages = function(array $items) use (&$countPages) {
    $total = 0;
    foreach ($items as $item) {
      if (empty($item['below'])) {
        $total += 1;
      } else {
        $total += $countPages($item['below']);
      }
    }
    return $total;
  };

  $response = [
    'items' => array_values($items),
    'total_pages' => 1 + $countPages($items), // +1 for homepage
  ];

  \Drupal::cache()->set($cid, $response, Cache::PERMANENT, ['config:vactory_dashboard.menu.settings', 'menu:' . $menu_id]);

  $cache[$cid] = $response;

  return $response;
}

/**
 * Recursive helper to extract menu items.
 */
function extract_menu_items(array $tree, array &$items = []) {
  foreach ($tree as $item_value) {
    $menu_entity = NULL;
    if (!empty($item_value['original_link']) && method_exists($item_value['original_link'], 'getEntity')) {
      $menu_entity = $item_value['original_link']->getEntity();
    }

    if ($menu_entity && $menu_entity->hasField('hide_menu_item') && !$menu_entity->get('hide_menu_item')->isEmpty()) {
      $hide_menu_item = $menu_entity->get('hide_menu_item')->value ?? FALSE;
      if ($hide_menu_item) {
        continue;
      }
    }

    /** @var \Drupal\Core\Menu\MenuLinkInterface $org_link */
    $org_link = $item_value['original_link'];
    $new_value = get_element_value($org_link);

    if (!empty($item_value['below'])) {
      $new_value['below'] = [];
      extract_menu_items($item_value['below'], $new_value['below']);
    }

    $items[] = $new_value;
  }
}

/**
 * Helper to extract values from a MenuLinkInterface.
 */
function get_element_value(MenuLinkInterface $link) {
  $return = [];
  $uuid = $link->getDerivativeId() ?: $link->getBaseId();
  $return['id'] = $uuid;
  $return['title'] = $link->getTitle();

  $url = $link->getUrlObject()->toString();
  $current_lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $path = \Drupal::service('path_alias.manager')->getPathByAlias(str_replace('/' . $current_lang, '', $url));

  if (str_starts_with($path, '/node/')) {
    $node_id = (int) str_replace('/node/', '', $path);
    $return['nid'] = $node_id;
    $return['url'] = Url::fromRoute('vactory_dashboard.vactory_page.edit', ['id' => $node_id], ['absolute' => TRUE])->toString();
  }

  return $return;
}

/**
 * Check if a module is installed.
 */
function is_module_installed($module_name) {
  $exists = \Drupal::moduleHandler()->moduleExists($module_name);
  return ['exists' => $exists];
}

/**
 * Get Advanced Dashboard tutorial links.
 */
function get_advanced_dashboard() {
  $config = \Drupal::config('vactory_dashboard.advanced.settings');

  $video_url = $config->get('video_tutoriel');
  $file_url = NULL;
  $file_id = $config->get('tutorial_file');

  if (!empty($file_id)) {
    $file_id_value = is_array($file_id) ? reset($file_id) : $file_id;
    $file = File::load($file_id_value);
    if ($file) {
      $file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
    }
  }

  return [
    'video_url' => $video_url,
    'file_url' => $file_url,
  ];
}

/**
 * Get Advanced Dashboard support info.
 */
function get_advanced_dashboard_support() {
  $config = \Drupal::config('vactory_dashboard.advanced.support');

  $first_name = $config->get('first_name');
  $last_name = $config->get('last_name');
  $title = $config->get('title');
  $email = $config->get('email');
  $phone = $config->get('phone');
  $image_url = '';

  $image = $config->get('image');
  $image_id = is_array($image) ? reset($image) : $image;

  if (!empty($image_id) && is_numeric($image_id)) {
    $file = File::load($image_id);
    if ($file) {
      $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
    }
  }

  $is_populated = !empty($first_name) && !empty($last_name) && !empty($title) && !empty($email) && !empty($phone);

  return [
    'first_name' => $first_name,
    'last_name' => $last_name,
    'full_name' => trim("$first_name $last_name"),
    'title' => $title,
    'email' => $email,
    'phone' => $phone,
    'image' => $image_url,
    'isPopulated' => $is_populated,
  ];
}