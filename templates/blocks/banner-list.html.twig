{# Dashboard layout template #}
{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}
{% block content %}
    <div class="dashboard-layout"
         x-data="bannerBlocks()"
         x-init="loadBlocks()"
         @keyup.escape.window="showImageModal = false">
        {# Page header with Add button #}
        <div class="mb-8 flex flex-col items-start gap-3 lg:flex-row justify-between lg:items-center">
            <h1 class="text-2xl font-semibold text-slate-900">{{ "Banner Blocks" | t }}</h1>
            <a href="{{ path('block_content.add_form', {
                'block_content_type': 'vactory_block_component',
                'destination': path('vactory_dashboard.settings.banner_blocks')
            }) }}"
               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 max-lg:self-end">
                <svg class="w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                     stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                {{ "Ajouter Banner"|t }}
            </a>
        </div>

        {# Search and filters #}
        {# <div class="bg-white shadow-sm px-4 py-4 rounded-lg mb-6">
            <div class="flex-1">
                <label for="search" class="sr-only">{{ "Rechercher" | t }}</label>
                <div class="relative">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                        <svg class="h-5 w-5 text-gray-400" viewbox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                  d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
                                  clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <input type="text"
                           id="search"
                           name="search"
                           x-model="filters.search"
                           @input.debounce.300ms="loadBlocks(1)"
                           class="block w-full rounded-md border-0 py-1.5 pl-10 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                           placeholder="{{ "Rechercher par titre..." | t }}">
                </div>
            </div>
        </div> #}

        {# Blocks list #}
        <div class="bg-white shadow-sm border border-gray-100 rounded-xl overflow-x-auto">
            <table class="min-w-full table-auto">
                <thead class="bg-gray-50">
                <tr>
                    <th scope="col"
                        class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {{ "Groupe" | t }}
                    </th>
                    <th scope="col"
                        class="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {{ "Image" | t }}
                    </th>
                    <th scope="col"
                        class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {{ "Paths" | t }}
                    </th>
                    <th scope="col"
                        class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {{ "Status" | t }}
                    </th>
                    <th scope="col" class="relative px-6 py-4">
                        <span class="sr-only">{{ "Actions" | t }}</span>
                    </th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                <template x-if="loading">
                    <tr>
                        <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                            <div class="flex justify-center items-center space-x-2">
                                <svg class="animate-spin h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg"
                                     fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                            stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor"
                                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>{{ "Loading..." | t }}</span>
                            </div>
                        </td>
                    </tr>
                </template>
                <template x-if="!loading && blocks.length === 0">
                    <tr>
                        <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                            {{ "No blocks found" | t }}
                        </td>
                    </tr>
                </template>
                <template x-for="block in blocks" :key="block.id">
                    <tr class="hover:bg-gray-50 transition-colors duration-200">
                        <td class="px-6 py-4">
                            <div class="text-sm font-medium text-gray-900" x-text="block.label"></div>
                        </td>
                        <td class="px-6 py-4 text-center">
                            <template x-if="block.image">
                                <button
                                        @click="showImageModal = true; currentImage = block.image"
                                        class="cursor-pointer focus:outline-none">
                                    <img
                                            :src="block.image"
                                            :alt="block.label"
                                            class="w-12 h-12 mx-auto bg-gray-100 rounded-lg object-cover hover:opacity-75 transition-opacity">
                                </button>
                            </template>
                            <template x-if="!block.image">
                                <div class="w-12 h-12 mx-auto bg-gray-100 rounded-lg flex items-center justify-center">
                                    <svg class="w-6 h-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                </div>
                            </template>
                        </td>
                        <td class="px-6 py-4">
                            <div class="text-sm space-y-3">
                                <template x-if="block.visibility.request_path">
                                    <div class="bg-gray-50 rounded-lg p-3">
                                        <div class="flex items-center mb-2">
                                            <svg class="w-4 h-4 text-gray-500 mr-2" xmlns="http://www.w3.org/2000/svg"
                                                 viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                            </svg>
                                            <span class="font-medium text-gray-700">{{ "URL Paths"|t }}</span>
                                        </div>
                                        <template x-if="block.visibility.request_path.negate">
                                            <div class="text-gray-900 font-medium mb-1">{{ "All pages except:"|t }}</div>
                                        </template>
                                        <template x-for="path in block.visibility.request_path.pages.split('\n')"
                                                  :key="path">
                                            <div class="mb-1"
                                                 :class="block.visibility.request_path.negate ? 'ml-3 text-gray-500' : ''">
                                                <code class="bg-gray-100 px-2 py-0.5 rounded text-sm"
                                                      x-text="path"></code>
                                            </div>
                                        </template>
                                    </div>
                                </template>

                                <template x-if="block.visibility['entity_bundle:node']">
                                    <div class="bg-gray-50 rounded-lg p-3">
                                        <div class="flex items-center mb-2">
                                            <svg class="w-4 h-4 text-gray-500 mr-2" xmlns="http://www.w3.org/2000/svg"
                                                 viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                                            </svg>
                                            <span class="font-medium text-gray-700">{{ "Content Types"|t }}</span>
                                        </div>
                                        <template x-if="block.visibility['entity_bundle:node'].negate">
                                            <div class="text-gray-900 font-medium mb-1">{{ "All content types except:"|t }}</div>
                                        </template>
                                        <div class="flex flex-wrap gap-2"
                                             :class="block.visibility['entity_bundle:node'].negate ? 'ml-3' : ''">
                                            <template
                                                    x-for="[key, value] in Object.entries(block.visibility['entity_bundle:node'].bundles)"
                                                    :key="key">
                                                <template x-if="value !== '0'">
                                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800"
                                                          x-text="key.replace(/_/g, ' ').charAt(0).toUpperCase() + key.replace(/_/g, ' ').slice(1)"></span>
                                                </template>
                                            </template>
                                        </div>
                                    </div>
                                </template>

                                <template
                                        x-if="!block.visibility.request_path && !block.visibility['entity_bundle:node']">
                                    <div class="text-gray-500 italic flex items-center">
                                        <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                             fill="none" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                                        </svg>
                                        {{ "Visible everywhere"|t }}
                                    </div>
                                </template>
                            </div>
                        </td>
                        <td class="px-6 py-4">
                            <span class="px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full"
                                  :class="block.status ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                                <span x-text="block.status ? '{{ 'Actif'|t }}' : '{{ 'Inactif'|t }}'"></span>
                            </span>
                        </td>
                        <td class="px-6 py-4 text-right text-sm font-medium">
                            <a :href="block.edit_path"
                               class="inline-flex items-center justify-center w-8 h-8 text-gray-500 hover:text-green-600 hover:bg-gray-50 rounded-lg transition-colors duration-200">
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                            </a>
                        </td>
                    </tr>
                </template>
                </tbody>
            </table>
        </div>

        {# Pagination #}
        <div class="mt-4 flex items-center justify-end" x-show="totalPages > 1">
            <nav class="isolate inline-flex -space-x-px rounded-lg shadow-sm" aria-label="Pagination">
                <button
                        @click="loadBlocks(currentPage - 1)"
                        :disabled="currentPage === 1"
                        class="relative inline-flex items-center rounded-l-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 disabled:opacity-50">
                    {{ "Précédent" | t }}
                </button>

                <template x-for="page in pages" :key="page">
                    <button
                            @click="loadBlocks(page)"
                            :class="page === currentPage ? 'z-10 bg-primary-500 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600' : 'text-gray-900 ring-1 ring-inset ring-gray-300 bg-white hover:bg-gray-50 focus:z-20 focus:outline-offset-0'"
                            class="relative inline-flex items-center px-4 py-2 text-sm font-semibold">
                        <span x-text="page"></span>
                    </button>
                </template>

                <button
                        @click="loadBlocks(currentPage + 1)"
                        :disabled="currentPage === totalPages"
                        class="relative ml-3 inline-flex items-center rounded-r-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 disabled:opacity-50">
                    {{ "Suivant" | t }}
                </button>
            </nav>
        </div>

        {# Image Modal #}
        <div
                x-show="showImageModal"
                x-cloak
                class="fixed inset-0 z-50 overflow-y-auto"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100"
                x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-100"
                x-transition:leave-end="opacity-0">
            <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
                <div
                        class="fixed inset-0 transition-opacity"
                        aria-hidden="true"
                        @click="showImageModal = false">
                    <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
                </div>

                <div
                        class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full"
                        @click.away="showImageModal = false">
                    <div class="bg-white p-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                                <img
                                        :src="currentImage"
                                        alt="Banner Preview"
                                        class="w-full h-auto rounded-lg">
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button
                                type="button"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                                @click="showImageModal = false">
                            {{ "Close"|t }}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
      function bannerBlocks() {
        return {
          blocks: [],
          currentPage: 1,
          totalPages: 1,
          loading: true,
          showImageModal: false,
          currentImage: '',
          filters: {
            search: '',
          },
          pages: [],
          async loadBlocks(page = 1) {
            this.loading = true;
            this.currentPage = page;
            const params = new URLSearchParams({
              page: page,
              search: this.filters.search,
            });

            try {
              const response = await fetch(`{{ path('vactory_dashboard.banner_blocks.api') }}?${params.toString()}`);
              const data = await response.json();
              this.blocks = data.data;
              this.totalPages = data.pages;
              this.pages = this.generatePageNumbers(data.page, data.pages);
            } catch (error) {
              console.error('Error loading blocks:', error);
            } finally {
              this.loading = false;
            }
          },
          generatePageNumbers(currentPage, totalPages) {
            const pages = [];
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
              startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
              pages.push(i);
            }

            return pages;
          },
        };
      }
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
      [x-cloak] {
        display: none !important;
      }
    </style>
{% endblock %}
