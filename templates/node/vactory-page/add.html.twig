{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
    <div class="h-full flex flex-col"
         x-data="pageEditor({language: '{{ language }}'})">
        <div x-show="!showBlockForm">
            {# Header with back button, title and actions #}
            {% include "@vactory_dashboard/node/_components/actions.html.twig" with {
                label: 'Create Page'|t
            } %}
        </div>
        {# Notification #}
        {% include "@vactory_dashboard/node/_components/message-notification.html.twig" %}

        <div x-show="!showBlockForm">
            {# Tabs #}
            {% include "@vactory_dashboard/node/_components/tabs.html.twig" %}
        </div>

        {# Node Edit View #}
        <div x-show="!showBlockForm">
            {# Content Tab #}
            <div x-show="activeTab === 'content'" class="flex-1 overflow-y-auto p-3">
                <div class="w-full">

                    {% include "@vactory_dashboard/node/_components/add-block-action.html.twig" with {
                        show: true
                    } %}

                    <div class="space-y-1">
                        {% include "@vactory_dashboard/_components/paragraph/blocks.html.twig" %}
                    </div>
                </div>
            </div>

            {# Settings Tab #}
            {% include "@vactory_dashboard/node/_components/settings-form.html.twig" %}

            {# SEO Tab #}
            {% include "@vactory_dashboard/node/_components/seo-form.html.twig" %}
        </div>

        {# Block Form View #}
        <div x-show="showBlockForm" class="h-full">
            {% include "@vactory_dashboard/_components/paragraph/block-form.html.twig" %}
        </div>

        {# Include the blocks modal #}
        {% include "@vactory_dashboard/_components/paragraph/blocks-modal.html.twig" %}
    </div>
{% endblock %}

{% block javascripts %}
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.data('pageEditor', (config) => ({
          language: config.language,
          activeTab: 'content',
          blocks: [],
          settings: {
            title: '',
            alias: '',
            status: true,
          },
          seo: {},
          showBlocksModal: false,
          showBlockForm: false,
          selectedTemplate: null,
          blockForm: {
            extra_fields: {},
            fields: {},
            items: [],
            config: {
              title: '',
              show_title: false,
              width: 'full_width',
              spacing: '_none',
              css_classes: '',
            },
          },
          currentBlockIndex: null,
          dragStartIndex: null,
          dragStartItemIndex: null,
          dragStart(event) {
            this.dragStartIndex = parseInt(event.target.dataset.index);
            event.dataTransfer.effectAllowed = 'move';
          },
          dragStartItem(event) {
            this.dragStartItemIndex = parseInt(event.target.dataset.index);
            event.dataTransfer.effectAllowed = 'move';
          },
          dragEnd(event) {
            const dragEndIndex = parseInt(event.target.closest('[draggable]').dataset.index);

            if (this.dragStartIndex !== null && dragEndIndex !== null && this.dragStartIndex !== dragEndIndex) {
              // Remove the dragged item
              const [draggedItem] = this.blocks.splice(this.dragStartIndex, 1);
              // Insert it at the new position
              this.blocks.splice(dragEndIndex, 0, draggedItem);

              // Reset drag state
              this.dragStartIndex = null;

              // Show success notification
              this.showNotification('success', '{{ 'Block order updated'|t }}');
            }
          },
          dragEndItem(event) {
            const dragEndIndex = parseInt(event.target.closest('[draggable]').dataset.index);

            if (this.dragStartItemIndex !== null && dragEndIndex !== null && this.dragStartItemIndex !== dragEndIndex) {
              // Remove the dragged item
              const [draggedItem] = this.blockForm.items.splice(this.dragStartItemIndex, 1);
              // Insert it at the new position
              this.blockForm.items.splice(dragEndIndex, 0, draggedItem);

              // Reset drag state
              this.dragStartItemIndex = null;

              // Show success notification
              this.showNotification('success', '{{ 'Item order updated'|t }}');
            }
          },
          async modifyBlock(index) {
            const block = this.blocks[index];
            this.currentBlockIndex = index;
            // Find the template that matches this block
            const template = block.widget_config;
            this.selectedTemplate = template;
            // Initialize the form data structure
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: template.name || '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };

            if (template.multiple) {
              // For multiple items, widget_data is an object with numeric keys (0, 1, 2, etc.)
              const items = [];
              let i = 0;
              while (block.widget_data[i] !== undefined) {
                const item = block.widget_data[i];
                const mappedItem = {};
                // Map each field in the item
                Object.keys(template.fields).forEach(fieldName => {
                  if (template.fields[fieldName].type === 'text_format') {
                    mappedItem[fieldName] = item[fieldName].value || '';
                  } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                    const imageKey = Object.keys(item[fieldName])[0];
                    const imageData = item[fieldName][imageKey];
                    const imageId = imageData.selection[0].target_id;
                    if (imageId) {
                      mappedItem[fieldName] = {
                        id: imageId,
                        url: imageData.selection[0].url,
                        name: imageData.name,
                        path: 'items.' + i + '.' + fieldName,
                        key: imageKey,
                      };
                    } else {
                      mappedItem[fieldName] = {
                        id: null,
                        url: null,
                        name: null,
                        path: 'items.' + i + '.' + fieldName,
                        key: imageKey ?? new Date().getTime(),
                      };
                    }
                  } else if (template.fields[fieldName].type === 'json_api_collection') {
                    mappedItem[fieldName] = item[fieldName];
                  } else {
                    mappedItem[fieldName] = item[fieldName] ?? '';
                  }
                });
                items.push(mappedItem);
                i++;
              }
              this.blockForm.items = items;

              // If no items exist, add one empty item
              if (!this.blockForm.items.length) {
                this.addItem();
              }
            } else {
              // Handle single item case
              // widget_data[0] contains the fields
              if (block.widget_data && block.widget_data[0]) {
                Object.keys(template.fields).forEach(fieldName => {
                  if (block.widget_data[0][fieldName]) {
                    if (template.fields[fieldName].type === 'text_format') {
                      this.blockForm.fields[fieldName] = block.widget_data[0][fieldName].value || '';
                    } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                      const imageKey = Object.keys(block.widget_data[0][fieldName])[0];
                      const imageData = block.widget_data[0][fieldName][imageKey];
                      const imageId = imageData?.selection ? imageData?.selection[0]?.target_id : null;
                      if (imageId) {
                        this.blockForm.fields[fieldName] = {
                          id: imageId ?? null,
                          url: imageData?.selection[0]?.url ?? null,
                          name: imageData?.name ?? null,
                          path: 'fields.' + fieldName,
                          key: imageKey,
                        };
                      } else {
                        this.blockForm.fields[fieldName] = {
                          id: null,
                          url: null,
                          name: null,
                          path: 'fields.' + fieldName,
                          key: imageKey ?? new Date().getTime(),
                        };
                      }
                    } else if (template.fields[fieldName].type === 'json_api_collection') {
                      this.blockForm.fields[fieldName] = block.widget_data[0][fieldName];
                    } else {
                      this.blockForm.fields[fieldName] = block.widget_data[0][fieldName];
                    }
                  }
                });
              }
            }

            // Handle extra fields if they exist
            if (block.widget_data.extra_field) {
              Object.keys(template.extra_fields || {}).forEach(fieldName => {
                if (block.widget_data.extra_field[fieldName]) {
                  if (template.extra_fields[fieldName].type === 'text_format') {
                    this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName].value || '';
                  } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName].type)) {
                    const imageKey = Object.keys(block.widget_data.extra_field[fieldName])[0];
                    const imageData = block.widget_data.extra_field[fieldName][imageKey];
                    const imageId = imageData.selection[0].target_id;
                    if (imageId) {
                      this.blockForm.extra_fields[fieldName] = {
                        id: imageId,
                        url: imageData.selection[0].url,
                        name: imageData.name,
                        path: 'extra_fields.' + fieldName,
                        key: imageKey,
                      };
                    } else {
                      this.blockForm.extra_fields[fieldName] = {
                        id: null,
                        url: null,
                        name: null,
                        path: 'extra_fields.' + fieldName,
                        key: imageKey ?? new Date().getTime(),
                      };
                    }
                  } else if (template.extra_fields[fieldName].type === 'json_api_collection') {
                    this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName];
                  } else {
                    this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName];
                  }
                }
              });
            }

            this.showBlockForm = true;
          },
          saveBlock() {
            let blockData;

            if (this.selectedTemplate.multiple) {
              // For multiple items, convert array to object with numeric keys
              blockData = {};
              this.blockForm.items.forEach((item, index) => {
                blockData[index] = {};
                Object.keys(this.selectedTemplate.fields).forEach(fieldName => {
                  if (this.selectedTemplate.fields[fieldName].type === 'text_format') {
                    blockData[index][fieldName] = {
                      value: item[fieldName] || '',
                      format: 'full_html',
                    };
                  } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                    blockData[index][fieldName] = {
                      [item[fieldName].key]: {
                        media_library_selection: '',
                        media_library_update_widget: 'Update widget',
                        open_button: 'Add media',
                        name: item[fieldName]?.name ?? '',
                        selection: [
                          {
                            remove_button: 'Remove',
                            target_id: item[fieldName].id,
                            url: item[fieldName].url,
                            weight: 0,
                          },
                        ],
                      },
                    };
                  } else {
                    blockData[index][fieldName] = item[fieldName] ?? '';
                  }
                });
              });
            } else {
              // For single item, wrap in array with index 0
              blockData = {
                0: {},
              };
              Object.keys(this.selectedTemplate.fields).forEach(fieldName => {
                if (this.selectedTemplate.fields[fieldName].type === 'text_format') {
                  blockData[0][fieldName] = {
                    value: this.blockForm.fields[fieldName] || '',
                    format: 'full_html',
                  };
                } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                  blockData[0][fieldName] = {
                    [this.blockForm.fields[fieldName].key]: {
                      media_library_selection: '',
                      media_library_update_widget: 'Update widget',
                      open_button: 'Add media',
                      name: this?.blockForm?.fields?.[fieldName]?.name ?? '',
                      selection: [
                        {
                          remove_button: 'Remove',
                          target_id: this.blockForm.fields[fieldName].id,
                          url: this.blockForm.fields[fieldName].url,
                          weight: 0,
                        },
                      ],
                    },
                  };
                } else if (this.selectedTemplate.fields[fieldName].type === 'json_api_collection') {
                  // Nothing to change here
                  blockData[0][fieldName] = this.blockForm.fields[fieldName];
                } else {
                  blockData[0][fieldName] = this.blockForm.fields[fieldName] ?? '';
                }
              });
            }

            // Add extra fields if they exist
            if (Object.keys(this.blockForm.extra_fields).length > 0) {
              blockData.extra_field = {};
              Object.keys(this.blockForm.extra_fields).forEach(fieldName => {
                if (this.selectedTemplate.extra_fields[fieldName].type === 'text_format') {
                  blockData.extra_field[fieldName] = {
                    value: this.blockForm.extra_fields[fieldName] || '',
                    format: 'full_html',
                  };
                } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.extra_fields[fieldName].type)) {
                  blockData.extra_field[fieldName] = {
                    [this.blockForm.extra_fields[fieldName].key]: {
                      media_library_selection: '',
                      media_library_update_widget: 'Update widget',
                      open_button: 'Add media',
                      name: this?.blockForm?.extra_fields?.[fieldName]?.name ?? '',
                      selection: [
                        {
                          remove_button: 'Remove',
                          target_id: this.blockForm.extra_fields[fieldName].id,
                          url: this.blockForm.extra_fields[fieldName].url,
                          weight: 0,
                        },
                      ],
                    },
                  };
                } else {
                  blockData.extra_field[fieldName] = this.blockForm.extra_fields[fieldName] ?? '';
                }
              });
            }

            if (this.currentBlockIndex !== null) {
              // Modify existing block
              this.blocks[this.currentBlockIndex] = {
                ...this.blocks[this.currentBlockIndex], // Preserve existing ID and other properties
                widget_data: blockData,
                title: this.blockForm.config.title,
                show_title: this.blockForm.config.show_title,
                width: this.blockForm.config.width,
                spacing: this.blockForm.config.spacing,
                css_classes: this.blockForm.config.css_classes,
              };
              this.showNotification('success', '{{ 'Block updated successfully'|t }}');
            } else {
              // Add new block
              this.blocks.push({
                id: Date.now(),
                is_new: true,
                title: this.blockForm.config.title,
                show_title: this.blockForm.config.show_title,
                width: this.blockForm.config.width,
                spacing: this.blockForm.config.spacing,
                css_classes: this.blockForm.config.css_classes,
                preview: this.selectedTemplate.screenshot,
                widget_id: this.selectedTemplate.uuid,
                widget_config: this.selectedTemplate,
                widget_data: blockData,
              });
              this.showNotification('success', '{{ 'Block added successfully'|t }}');
            }

            // Reset form and close
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };
            this.currentBlockIndex = null;
            this.showBlockForm = false;
          },
          selectTemplate(template) {
            this.selectedTemplate = template;
            this.currentBlockIndex = null; // Reset current block index for new blocks

            // Initialize the form data structure
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: template.name || '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };
            // Initialize extra_fields if they exist
            if (template.extra_fields) {
              Object.keys(template.extra_fields).forEach(fieldName => {
                // Initialize url_extended fields with both title and url
                if (template.extra_fields[fieldName].type === 'url_extended') {
                  this.blockForm.extra_fields[fieldName] = {
                    title: '',
                    url: '',
                    attributes: {
                      label: '',
                      class: '',
                      id: 'link-' + Math.random().toString(36).slice(2),
                      target: '',
                      rel: ''
                    },
                  };
                } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName].type)) {
                  this.blockForm.extra_fields[fieldName] = {
                    id: null,
                    url: null,
                    name: null,
                    path: 'extra_fields.' + fieldName,
                    key: new Date().getTime(),
                  };
                } else if (template.extra_fields[fieldName].type === 'json_api_collection') {
                  // Nothing to change here
                  this.blockForm.extra_fields[fieldName] = template.extra_fields[fieldName]['options']['#default_value'];
                } else {
                  this.blockForm.extra_fields[fieldName] = '';
                }
              });
            }

            // Initialize fields or first item based on multiple flag
            if (template.multiple) {
              this.addItem(); // Add first item
            } else {
              Object.keys(template.fields).forEach(fieldName => {
                console.log('template.fields[fieldName]', template.fields[fieldName]);
                // Initialize url_extended fields with both title and url
                if (template.fields[fieldName].type === 'url_extended') {
                  this.blockForm.fields[fieldName] = {
                    title: '',
                    url: '',
                    attributes: {
                      label: '',
                      class: '',
                      id: 'link-' + Math.random().toString(36).slice(2),
                      target: '',
                      rel: ''
                    },

                  };
                } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                  this.blockForm.fields[fieldName] = {
                    id: null,
                    url: null,
                    name: null,
                    path: 'fields.' + fieldName,
                    key: new Date().getTime(),
                  };
                } else if (template.fields[fieldName].type === 'json_api_collection') {
                  this.blockForm.fields[fieldName] = template.fields[fieldName]['options']['#default_value'];
                } else {
                  this.blockForm.fields[fieldName] = '';
                }
              });
            }
            this.showBlocksModal = false;
            this.showBlockForm = true;
          },
          blockSearch: '',
          blockCategory: 'all',
          templates: [],
          categories: [],
          isLoadingTemplates: false,
          async fetchTemplates() {
            this.isLoadingTemplates = true;
            try {
              const response = await fetch('/api/vactory-dashboard/templates');
              const result = await response.json();
              if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch templates');
              }

              // Transform the nested object into a flat array and extract categories
              const categoriesSet = new Set();
              const templatesArray = [];

              Object.entries(result.data).forEach(([category, templates]) => {
                categoriesSet.add(category);
                Object.entries(templates).forEach(([id, template]) => {
                  templatesArray.push({
                    ...template,
                    id: template.uuid,
                    category: category,
                  });
                });
              });

              this.templates = templatesArray;
              this.categories = Array.from(categoriesSet);
            } catch (error) {
              console.error('Error fetching templates:', error);
              this.showNotification('error', error.message || '{{ 'Failed to load templates'|t }}');
            } finally {
              this.isLoadingTemplates = false;
            }
          },
          get filteredTemplates() {
            return this.templates.filter(template => {
              const matchesSearch = template.name.toLowerCase().includes(this.blockSearch.toLowerCase());
              const matchesCategory = this.blockCategory === 'all' || template.category === this.blockCategory;
              return matchesSearch && matchesCategory;
            });
          },
          addItem() {
            const newItem = {};
            // Initialize all fields with empty values
            Object.keys(this.selectedTemplate.fields).forEach((fieldName, index) => {
              // Initialize url_extended fields with both title and url
              if (this.selectedTemplate.fields[fieldName].type === 'url_extended') {
                newItem[fieldName] = {
                  title: '',
                  url: '',
                  attributes: {
                      label: '',
                      class: '',
                      id: 'link-' + Math.random().toString(36).slice(2),
                      target: '',
                      rel: ''
                    },
                };
              } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                newItem[fieldName] = {
                  id: null,
                  url: null,
                  name: null,
                  path: 'items.' + this.blockForm.items.length + '.' + fieldName,
                  key: new Date().getTime(),
                };
              } else if (this.selectedTemplate.fields[fieldName].type === 'json_api_collection') {
                // Nothing to change here
                newItem[fieldName] = this.selectedTemplate.fields[fieldName]['options']['#default_value'];
              } else {
                newItem[fieldName] = '';
              }
            });

            // Add the new item with highlighted state
            newItem._isNewItem = true;
            this.blockForm.items.push(newItem);

            // Scroll to the new item after DOM update
            this.$nextTick(() => {
              const newItemIndex = this.blockForm.items.length - 1;
              const newItemElement = document.querySelector(`[data-item-index="${newItemIndex}"]`);
              if (newItemElement) {
                newItemElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

                // Remove highlight after 3 seconds
                setTimeout(() => {
                  newItem._isNewItem = false;
                }, 3000);
              }
            });
          },
          removeItem(index) {
            this.blockForm.items.splice(index, 1);
          },
          isSaving: false,
          notification: {
            show: false,
            type: 'success',
            message: '',
            timeout: null,
          },
          init() {
            // Fetch templates when component initializes
            this.fetchTemplates();
          },

          showNotification(type, message) {
            // Clear any existing timeout
            if (this.notification.timeout) {
              clearTimeout(this.notification.timeout);
            }

            // Show new notification
            this.notification.type = type;
            this.notification.message = message;
            this.notification.show = true;

            // Auto hide after 5 seconds
            this.notification.timeout = setTimeout(() => {
              this.notification.show = false;
            }, 5000);
          },
          async saveChanges() {
            if (this.isSaving) {
              return;
            }
            this.isSaving = true;
            try {
              const response = await fetch("{{ path('vactory_dashboard.node.save') }}", {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  language: this.language,
                  settings: this.settings,
                  seo: this.seo,
                  blocks: this.blocks,
                  status: this.settings.status,
                }),
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || 'Failed to save changes');
              }

              this.showNotification('success', '{{ 'Changes saved successfully'|t }}');
              window.location.href = data?.edit_path;
            } catch (error) {
              console.error('Error saving changes:', error);
              this.showNotification('error', error.message || '{{ 'An error occurred while saving'|t }}');
            } finally {
              this.isSaving = false;
            }
          },
          removeBlock(index) {
            // Remove the block at the specified index
            this.blocks.splice(index, 1);
            // Show success notification
            this.showNotification('success', '{{ 'Block removed successfully'|t }}');
          },
          // Media Library States
          showMediaLibrary: false,
          mediaLoading: false,
          mediaError: null,
          mediaItems: [],
          currentMediaPage: 1,
          totalMediaPages: 1,
          totalMedia: 0,
          mediaFilters: {
            search: '',
            type: 'image',
            limit: Alpine.store('limit'),
          },
          selectedType: 'image',
          selectedMedia: null,
          currentField: null,
          currentFieldPath: null,
          currentFieldIndex: null,
          selectedFieldInfo: null,
          loading: false,
          error: null,
          items: [],
          currentPage: 1,
          totalPages: 1,
          total: 0,
          filters: {
            search: '',
            type: 'image',
            limit: Alpine.store('limit'),
          },
          // Media Library Methods and states (@todo: must be shared across multiple files)
          async loadMedia(page = 1) {
            this.mediaLoading = true;
            this.mediaError = null;
            this.currentMediaPage = page;

            try {
              const params = new URLSearchParams({
                page: this.currentMediaPage.toString(),
                limit: this.mediaFilters.limit.toString(),
                search: this.mediaFilters.search,
                type: this.selectedType,
              });

              const response = await fetch(`{{ path('vactory_dashboard.media.data') }}?${params.toString()}`);

              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des médias"|t }}');
              }

              const data = await response.json();

              this.mediaItems = data.data.map(item => ({
                id: item.id,
                url: item.url,
                name: item.name,
                type: item.type,
              }));
              this.totalMedia = data.total;
              this.totalMediaPages = data.pages;
            } catch (error) {
              console.error('Error loading media:', error);
              this.mediaError = error.message;
              this.mediaItems = [];
            } finally {
              this.mediaLoading = false;
            }
          },
          openMediaLibrary(fieldName, path, key = null, type = 'image') {
            this.selectedType = type;
            this.currentField = fieldName;
            this.currentFieldPath = path;
            this.currentFieldKey = key;
            this.showMediaLibrary = true;
            this.loadMedia(1);
          },
          closeMediaLibrary() {
            this.showMediaLibrary = false;
            this.selectedMedia = null;
            this.currentField = null;
            this.mediaItems = [];
            this.currentMediaPage = 1;
            this.mediaFilters.search = '';
          },
          setValueByPath(obj, path, newValue) {
            const keys = path.split('.');
            const lastKey = keys.pop();
            const target = keys.reduce((o, key) => o[key], obj);
            target[lastKey] = newValue;
          },
          selectMedia(media) {
            this.selectedMedia = media;
            if (!this.selectedMedia || !this.currentField) {
              return;
            }

            // Create the image data structure
            const imageData = {
              id: media.id,
              url: media.url,
              name: media.name,
              path: this.currentFieldPath,
              key: this.currentFieldKey,
            };

            this.setValueByPath(this.blockForm, this.currentFieldPath, imageData);

            this.closeMediaLibrary();
            this.showNotification('success', '{{ "Media sélectionnée avec succès"|t }}');
          },
          clearImage(fieldName, path, key) {
            this.setValueByPath(this.blockForm, path, {
              id: null,
              url: null,
              name: null,
              path: path,
              key: key ?? new Date().getTime(),
            });
          },
          getFieldValue(fieldName, index = null) {
            if (index !== null) {
              // Handle multiple items case
              return this.blockForm.items[index]?.[fieldName];
            } else {
              // Handle single item case
              return this.blockForm.fields[fieldName];
            }
          },
          getVideoEmbedUrl(url) {
            if (!url) {
              return '';
            }
            const youtubePatterns = [
              /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
              /youtube\.com\/watch\?.*v=([^&\n?#]+)/,
            ];

            for (const pattern of youtubePatterns) {
              const match = url?.match(pattern);
              if (match) {
                const videoId = match[1];
                return `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1`;
              }
            }

            return url;
          },
        }));
      });
    </script>
{% endblock %}