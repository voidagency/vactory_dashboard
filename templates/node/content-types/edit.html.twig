{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
    <div x-data="{ isRTL: document.dir === 'rtl' }" :dir="isRTL ? 'rtl' : 'ltr'">
        <div class="h-full flex flex-col"
             x-init="init()"
             x-data="nodeForm({
           bundle: '{{ bundle }}',
           bundle_label: '{{ bundle_label }}',
           language: '{{ language }}',
           fields: '{{ fields|json_encode|e('js') }}',
           nid: '{{ nid }}',
           node: '{{ node|json_encode|e('js') }}',
           has_translation: '{{ has_translation }}',
           changed: '{{ changed }}',
           status: '{{ status }}'
         })">
            <div class="sticky top-0 z-10 bg-white">
                {# Header with back button, title and actions #}
                <div class="bg-white py-4 px-3 border-b border-slate-200 flex justify-between items-center gap-x-4 md:[dir='rtl']:flex-row-reverse">
                    <div class="flex items-center gap-x-3 md:[dir='rtl']:flex-row-reverse">
                        <a href="{{ path('vactory_dashboard.content_types', {'bundle': bundle}) }}"
                           class="me-3 text-slate-500 hover:text-primary-500 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                 stroke="currentColor" aria-hidden="true" data-slot="icon" class="h-4 w-4">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                      d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"></path>
                            </svg>
                        </a>
                        <h1 class="text-lg font-medium">{{ "Edit"|t }} {{ bundle_label }}</h1>
                    </div>
                    <div class="flex max-lg:w-full max-lg:flex-wrap max-lg:gap-3 max-lg:[&>*]:w-full max-lg:fixed max-lg:bottom-0 max-lg:left-0 max-lg:bg-white max-lg:shadow-lg max-lg:border-t max-lg:border-slate-200 max-lg:px-3 max-lg:py-4 lg:items-center lg:space-x-4">
                        {# Publish checkbox #}
                        <div class="flex items-center">
                            <input
                                    type="checkbox"
                                    id="publish-status"
                                    x-model="formData.status"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-slate-300 rounded">
                            <label for="publish-status" class="ms-2 block text-sm text-slate-700">
                                {{ 'Publish'|t }}
                            </label>
                        </div>
                        {% include "@vactory_dashboard/node/_components/langs.html.twig" %}

                        {% if alias %}
                          {% include "@vactory_dashboard/node/_components/preview.html.twig" with { preview_url: alias } %}
                        {% endif %}

                        <button
                                @click="saveNode()"
                                :disabled="isSaving"
                                :class="{
                    'opacity-50 cursor-not-allowed': isSaving,
                    'bg-primary-500 hover:bg-primary-600': !isSaving,
                    'bg-primary-400': isSaving
                }"
                                class="inline-flex items-center justify-center gap-x-2 rounded-lg transition-all duration-150 px-5 py-2 text-sm font-semibold text-white bg-primary-500 hover:bg-primary-600 shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
                        >
                            <!-- Loading spinner (shown when saving) -->
                            <svg x-show="isSaving" class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg"
                                 fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                        stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor"
                                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <!-- Button text (changes based on loading state) -->
                            <span x-text="isSaving ? '{{ 'Saving...'|t }}' : '{{ 'Save'|t }}'"></span>
                        </button>
                    </div>
                </div>
                {% include "@vactory_dashboard/node/content-types/_components/tabs.html.twig" %}
                {# Notification #}
                {% include "@vactory_dashboard/node/_components/message-notification.html.twig" %}
            </div>
            {# Form Fields #}
            <div class="flex-1 overflow-y-auto">
                <div class="mx-auto">
                    <form id="node-form" @submit.prevent="saveNode()"
                          class="bg-white rounded-lg shadow-sm p-2 space-y-6">
                        <div x-show="activeTab === 'content'" class="flex gap-y-6 flex-col">
                            <template x-for="(field, fieldName) in contentFields" :key="field.name">
                                <div>
                                    <label :class="{'required': field.required}"
                                           class="block text-sm font-medium text-slate-700 mb-1">
                                        <span x-text="field.label"></span>
                                        <span x-show="field.required" class="text-red-500">*</span>
                                        {% if language != node_default_lang %}
                                            <span x-show="!field.is_translatable"
                                                  class="text-slate-500">{{ '(All languages)'|t }}</span>
                                        {% endif %}
                                    </label>

                                    {# Text Input #}
                                    <template x-if="field.type === 'string'">
                                        <input type="text" :disabled="!field.is_translatable" :required="field.required"
                                               x-model="formData.fields[field.name]"
                                               @invalid="$el.classList.add('border-red-500')"
                                               @input="$el.classList.remove('border-red-500')"
                                               class="w-full py-1.5 px-3 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent">
                                        {% if language != node_default_lang %}
                                            :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}"
                                        {% endif %}
                                    </template>

                                    {# textformat #}
                                    <template x-if="field.type === 'text_with_summary'">
                                        <div x-html="field.textFormatField"></div>
                                    </template>

                                    {# Textarea #}
                                    <template x-if="field.type === 'text_long' || field.type === 'string_long'">
                                        <textarea :required="field.required" x-model="formData.fields[field.name]"
                                                  rows="4"
                                                  class="block w-full py-1.5 px-3 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent"></textarea>
                                        {% if language != node_default_lang %}
                                            :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}"
                                        {% endif %}
                                    </template>

                                    {# Image Upload #}
                                    <template x-if="field.type === 'image'">
                                        <div {% if language != node_default_lang %} :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}" {% endif %}>
                                            {% include "@vactory_dashboard/_components/media/media-selector.html.twig" with {'url': 'formData.fields[field.name].url', 'path': 'formData.fields[field.name].path', 'key': 'formData.fields[field.name].key', 'type': 'image'} %}
                                        </div>
                                    </template>

                                    {# Field FAQ #}
                                    <template x-if="field.type === 'faqfield'">
                                        {% include "@vactory_dashboard/_components/fields/faq.html.twig" %}
                                    </template>

                                    {# Remote video #}
                                    <template x-if="field.type === 'remote_video'">
                                        <div>
                                            {% include "@vactory_dashboard/_components/media/media-selector.html.twig" with {'name': 'formData.fields[field.name].name', 'url': 'formData.fields[field.name].url', 'path': 'formData.fields[field.name].path', 'key': 'formData.fields[field.name].key', 'type': 'remote_video'} %}
                                        </div>
                                    </template>

                                    {# File Upload #}
                                    <template x-if="field.type === 'file'">
                                        <div {% if language != node_default_lang %} :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}" {% endif %}>
                                            {% include "@vactory_dashboard/_components/media/media-selector.html.twig" with {'name': 'formData.fields[field.name].name', 'url': 'formData.fields[field.name].url', 'path': 'formData.fields[field.name].path', 'key': 'formData.fields[field.name].key', 'type': 'file'} %}
                                        </div>
                                    </template>

                                    {# Private file Upload #}
                                    <template x-if="field.type === 'private_file'">
                                        <div {% if language != node_default_lang %} :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}" {% endif %}>
                                            {% include "@vactory_dashboard/_components/media/media-selector.html.twig" with {'name': 'formData.fields[field.name].name', 'url': 'formData.fields[field.name].url', 'path': 'formData.fields[field.name].path', 'key': 'formData.fields[field.name].key', 'type': 'private_file'} %}
                                        </div>
                                    </template>

                                    <template x-if="field.type === 'link'">
                                        <input type="text" :required="field.required"
                                               x-model="formData.fields[field.name]"
                                               class="w-full py-1.5 px-3 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent">
                                        {% if language != node_default_lang %}
                                            :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}"
                                        {% endif %}
                                    </template>

                                    {# mail Input #}
                                    <template x-if="field.type === 'email'">
                                        <input type="email" :required="field.required"
                                               x-model="formData.fields[field.name]"
                                               class="w-full py-1.5 px-3 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent">
                                        {% if language != node_default_lang %}
                                            :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}"
                                        {% endif %}
                                    </template>
                                    {# datetime #}
                                    <template x-if="field.type === 'datetime'">
                                        <input type="date" :required="field.required"
                                               x-model="formData.fields[field.name]"
                                               class="w-full py-1.5 px-3 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent">
                                        {% if language != node_default_lang %}
                                            :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}"
                                        {% endif %}
                                    </template>
                                    <template x-if="field.type === 'select'">
                                        <div>
                                            <select :key="field.name + JSON.stringify(formData.fields[field.name])"
                                                    :required="field.required" :multiple="field.multiple"
                                                    x-model="formData.fields[field.name]"
                                                    class="w-full py-1.5 px-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent" {% if language != node_default_lang %} :class="{'opacity-50 cursor-not-allowed': !field.is_translatable}" {% endif %}>
                                                <template x-if="!field.multiple">
                                                    <option value="">{{ 'Select...'|t }}</option>
                                                </template>

                                                <template x-for="key in Object.keys(field.options)" :key="key">
                                                    <option :value="key"
                                                            :selected="(field.multiple ? formData.fields[field.name].includes(String(key)) : formData.fields[field.name] === String(key))"
                                                            x-text="field.options[key]"
                                                            class="py-1 px-2 rounded-md mb-[1px]"></option>
                                                </template>
                                            </select>
                                        </div>
                                    </template>
                                </div>
                            </template>
                        </div>
                        <div x-show="activeTab === 'cross_content'">
                            <template x-for="(field, fieldName) in crossContentFields" :key="field.name">
                                <div>
                                    <label :class="{'required': field.required}"
                                           class="block text-sm font-medium text-slate-700 mb-1">
                                        <span x-text="field.label"></span>
                                        <span x-show="field.required" class="text-red-500">*</span>
                                        {% if language != node_default_lang %}
                                            <span x-show="!field.is_translatable"
                                                  class="text-slate-500">{{ '(All languages)'|t }}</span>
                                        {% endif %}
                                    </label>
                                    <template x-if="field.type === 'field_cross_content'">
                                        {% include "@vactory_dashboard/node/content-types/_components/cross-content-field.html.twig" %}
                                    </template>
                                </div>
                            </template>
                        </div>
                    </form>
                </div>
            </div>
            {% include "@vactory_dashboard/_components/media/media-library.html.twig" %}
            {# SEO Tab #}
            {% include "@vactory_dashboard/node/_components/seo-form.html.twig" %}
        </div>
    </div>
{% endblock %}


{% block javascripts %}
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.data('nodeForm', (config) => ({
          bundle: config.bundle,
          nid: config.nid,
          node: config.node,
          has_translation: config.has_translation,
          bundle_label: config.bundle_label,
          language: config.language,
          fields: config.fields,
          changed: config.changed,
          seo: {},
          formData: {
            fields: {},
            status: config.status === '1',
          },
          activeTab: 'content',
          isSaving: false,
          notification: {
            show: false,
            type: 'success',
            message: '',
            timeout: null,
          },
          get contentFields() {
            return Object.fromEntries(
              Object.entries(this.fields).filter(([key, field]) => field.type !== 'field_cross_content'),
            );
          },
          get crossContentFields() {
            return Object.fromEntries(
              Object.entries(this.fields).filter(([key, field]) => field.type === 'field_cross_content'),
            );
          },
          init() {
            const node = JSON.parse(this.node);
            this.fields = JSON.parse(this.fields);
            window.seoData = {{ meta_tags|json_encode|raw }};
            this.seo = {
              title: window.seoData.title || '',
              description: window.seoData.description || '',
              keywords: window.seoData.keywords || '',
              abstract: window.seoData.abstract || '',
              article_author: window.seoData.article_author || '',
              article_expiration_time: window.seoData.article_expiration_time || '',
              article_modified_time: window.seoData.article_modified_time || '',
              article_published_time: window.seoData.article_published_time || '',
              article_section: window.seoData.article_section || '',
              article_publisher: window.seoData.article_publisher || '',
              article_tag: window.seoData.article_tag || '',
              book_author: window.seoData.book_author || '',
              book_isbn: window.seoData.book_isbn || '',
              book_release_date: window.seoData.book_release_date || '',
              book_tag: window.seoData.book_tag || '',
              og_audio: window.seoData.og_audio || '',
              og_audio_secure_url: window.seoData.og_audio_secure_url || '',
              og_audio_type: window.seoData.og_audio_type || '',
              og_country_name: window.seoData.og_country_name || '',
              og_determiner: window.seoData.og_determiner || '',
              og_email: window.seoData.og_email || '',
              og_fax_number: window.seoData.og_fax_number || '',
              og_image: window.seoData.og_image || '',
              og_image_secure_url: window.seoData.og_image_secure_url || '',
              og_image_alt: window.seoData.og_image_alt || '',
              og_image_height: window.seoData.og_image_height || '',
              og_image_width: window.seoData.og_image_width || '',
              og_image_type: window.seoData.og_image_type || '',
              og_image_url: window.seoData.og_image_url || '',
              og_latitude: window.seoData.og_latitude || '',
              og_locale: window.seoData.og_locale || '',
              og_locale_alternative: window.seoData.og_locale_alternative || '',
              og_locality: window.seoData.og_locality || '',
              og_longitude: window.seoData.og_longitude || '',
              og_phone_number: window.seoData.og_phone_number || '',
              og_description: window.seoData.og_description || '',
              og_postal_code: window.seoData.og_postal_code || '',
              og_region: window.seoData.og_region || '',
              og_see_also: window.seoData.og_see_also || '',
              og_site_name: window.seoData.og_site_name || '',
              og_street_address: window.seoData.og_street_address || '',
              og_title: window.seoData.og_title || '',
              og_type: window.seoData.og_type || '',
              og_url: window.seoData.og_url || '',
              og_updated_time: window.seoData.og_updated_time || '',
              og_video: window.seoData.og_video || '',
              og_video_duration: window.seoData.og_video_duration || '',
              og_video_height: window.seoData.og_video_height || '',
              og_video_secure_url: window.seoData.og_video_secure_url || '',
              og_video_type: window.seoData.og_video_type || '',
              og_video_width: window.seoData.og_video_width || '',
              profile_first_name: window.seoData.profile_first_name || '',
              profile_gender: window.seoData.profile_gender || '',
              profile_last_name: window.seoData.profile_last_name || '',
              profile_username: window.seoData.profile_username || '',
              video_actor: window.seoData.video_actor || '',
              video_actor_role: window.seoData.video_actor_role || '',
              video_tag: window.seoData.video_tag || '',
              video_writer: window.seoData.video_writer || '',
              og_updated_time: window.seoData.og_updated_time || '',
              video_series: window.seoData.video_series || '',
              video_release_date: window.seoData.video_release_date || '',
              video_director: window.seoData.video_director || '',
            };

            // Initialize form data based on fields
            Object.keys(this.fields).forEach((fieldKey) => {
              const field = this.fields[fieldKey];

              if (field.type === 'faqfield') {
                if (Array.isArray(field.value) && field.value.length) {
                  this.formData.fields[fieldKey] = field.value;
                } else if (Array.isArray(node[fieldKey]) && node[fieldKey].length) {
                  this.formData.fields[fieldKey] = node[fieldKey];
                } else {
                  this.formData.fields[fieldKey] = [{ question: '', answer: '' }];
                }

                console.log(`FAQ data for field "${fieldKey}":`, this.formData.fields[fieldKey]);
                return;
              }

              if (field?.textFormatField) {
                setTimeout(() => {
                  Drupal.editors.ckeditor5.onChange(document.getElementById(`edit-${field.name}-value`), () => {
                    const ckInstance = Drupal.CKEditor5Instances.values().next().value;
                    this.formData.fields[field.name] = ckInstance.getData();
                  });
                }, '3000');
              }

              if (field.type === 'image' || field.type === 'file' || field.type === 'remote_video' || field.type === 'private_file') {
                this.formData.fields[fieldKey] = node[fieldKey] ?? {
                  id: null,
                  url: null,
                  name: null,
                  path: fieldKey,
                  key: new Date().getTime(),
                };
              } else {
                this.formData.fields[fieldKey] = node[fieldKey] ?? '';
              }
            });
          },
          showNotification(type, message) {
            if (this.notification.timeout) {
              clearTimeout(this.notification.timeout);
            }
            this.notification.type = type;
            this.notification.message = message;
            this.notification.show = true;
            this.notification.timeout = setTimeout(() => {
              this.notification.show = false;
            }, 5000);
          },
          validateForm() {
            const form = document.getElementById('node-form');
            const requiredInputs = form.querySelectorAll('[required]');
            let isValid = true;

            requiredInputs.forEach(input => {
              if (!input.value && !input.disabled) {
                input.classList.add('border-red-500');
                isValid = false;
              }
            });

            return isValid;
          },
          async saveNode() {
            if (!this.validateForm()) {
              this.showNotification('error', '{{ "Please fill in all required fields"|t }}');
              return;
            }

            if (this.isSaving) {
              return;
            }
            this.isSaving = true;
            try {
              const response = await fetch(`/api/vactory-dashboard/${this.bundle}/node/edit/${this.nid}/save`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  language: this.language,
                  fields: this.formData.fields,
                  status: this.formData.status,
                  seo: this.seo,
                  has_translation: this.has_translation,
                  changed: this.changed,
                }),
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || '{{ 'Failed to save node'|t }}');
              }
              this.showNotification('success', '{{ 'Node created successfully'|t }}');
              window.location.reload();
            } catch (error) {
              console.error('Error saving node:', error);
              this.showNotification('error', error.message);
            } finally {
              this.isSaving = false;
            }
          },
          getVideoEmbedUrl(url) {
            if (!url) {
              return '';
            }
            const youtubePatterns = [
              /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
              /youtube\.com\/watch\?.*v=([^&\n?#]+)/,
            ];

            for (const pattern of youtubePatterns) {
              const match = url?.match(pattern);
              if (match) {
                const videoId = match[1];
                return `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1`;
              }
            }

            return url;
          },
          // Media Library Methods and states (@todo: must be shared across multiple files)
          showMediaLibrary: false,
          mediaLoading: false,
          mediaError: null,
          mediaItems: [],
          currentMediaPage: 1,
          totalMediaPages: 1,
          totalMedia: 0,
          mediaFilters: {
            search: '',
            type: 'image',
            limit: Alpine.store('limit'),
          },
          selectedType: 'image',
          selectedMedia: null,
          async loadMedia(page = 1) {
            this.mediaLoading = true;
            this.mediaError = null;
            this.currentMediaPage = page;

            try {
              const params = new URLSearchParams({
                page: this.currentMediaPage.toString(),
                limit: this.mediaFilters.limit.toString(),
                search: this.mediaFilters.search,
                type: this.selectedType,
              });

              const response = await fetch(`{{ path('vactory_dashboard.media.data') }}?${params.toString()}`);

              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des médias"|t }}');
              }

              const data = await response.json();

              this.mediaItems = data.data.map(item => ({
                id: item.id,
                url: item.url,
                name: item.name,
                type: item.type,
              }));
              this.totalMedia = data.total;
              this.totalMediaPages = data.pages;
            } catch (error) {
              console.error('Error loading media:', error);
              this.mediaError = error.message;
              this.mediaItems = [];
            } finally {
              this.mediaLoading = false;
            }
          },
          openMediaLibrary(fieldName, path, key = null, type = 'image') {
            this.selectedType = type;
            this.currentField = fieldName;
            this.currentFieldPath = path;
            this.currentFieldKey = key;
            this.showMediaLibrary = true;
            this.loadMedia(1);
          },
          clearImage(fieldName, path = '', key = '') {
            this.formData.fields[fieldName] = {
              id: null,
              url: null,
              name: null,
              path: fieldName,
              key: new Date().getTime(),
            };
          },
          closeMediaLibrary() {
            this.showMediaLibrary = false;
            this.selectedMedia = null;
            this.currentField = null;
            this.mediaItems = [];
            this.currentMediaPage = 1;
            this.mediaFilters.search = '';
          },
          selectMedia(media) {
            this.selectedMedia = media;
            if (!this.selectedMedia || !this.currentField) {
              return;
            }
            // Create the image data structure
            const imageData = {
              id: media.id,
              url: media.url,
              name: media.name,
              path: this.currentFieldPath,
              key: this.currentFieldKey,
            };

            //this.currentFieldPath
            this.formData.fields[this.currentFieldPath] = imageData;

            this.closeMediaLibrary();
            this.showNotification('success', '{{ "Media sélectionnée avec succès"|t }}');
          },
        }));
        document.addEventListener('alpine:init', () => {
          Alpine.data('alpineMuliSelect', (obj) => ({
            elementId: obj.elementId,
            options: [],
            selected: obj.selected,
            selectedElms: [],
            show: false,
            search: '',
            open() {
              this.show = true;
            },
            close() {
              this.show = false;
            },
            toggle() {
              this.show = !this.show;
            },
            isOpen() {
              return this.show === true;
            },

            // Initializing component
            init() {
              const options = document.getElementById(this.elementId).options;
              for (let i = 0; i < options.length; i++) {

                this.options.push({
                  value: options[i].value,
                  text: options[i].innerText,
                  search: options[i].dataset.search,
                  selected: Object.values(this.selected).includes(options[i].value),
                });

                if (this.options[i].selected) {
                  this.selectedElms.push(this.options[i]);
                }
              }

              // searching for the given value
              this.$watch('search', (e => {
                this.options = [];
                const options = document.getElementById(this.elementId).options;
                Object.values(options).filter((el) => {
                  var reg = new RegExp(this.search, 'gi');
                  return el.dataset.search.match(reg);
                }).forEach((el) => {
                  let newel = {
                    value: el.value,
                    text: el.innerText,
                    search: el.dataset.search,
                    selected: Object.values(this.selected).includes(el.value),
                  };
                  this.options.push(newel);
                });
              }));
            },
            // clear search field
            clear() {
              this.search = '';
            },
            // deselect selected options
            deselect() {
              setTimeout(() => {
                this.selected = [];
                this.selectedElms = [];
                Object.keys(this.options).forEach((key) => {
                  this.options[key].selected = false;
                });
              }, 100);
            },
            // select given option
            select(index, event) {
              if (!this.options[index].selected) {
                this.options[index].selected = true;
                this.options[index].element = event.target;
                this.selected.push(this.options[index].value);
                this.selectedElms.push(this.options[index]);

              } else {
                this.selected.splice(this.selected.lastIndexOf(index), 1);
                this.options[index].selected = false;
                Object.keys(this.selectedElms).forEach((key) => {
                  if (this.selectedElms[key].value == this.options[index].value) {
                    setTimeout(() => {
                      this.selectedElms.splice(key, 1);
                    }, 100);
                  }
                });
              }
            },
            // remove from selected option
            remove(index, option) {
              this.selectedElms.splice(index, 1);
              Object.keys(this.selected).forEach((skey) => {
                if (this.selected[skey] == option.value) {
                  this.selected.splice(skey, 1);
                }
              });
              Object.keys(this.options).forEach((key) => {
                if (this.options[key].value == option.value) {
                  this.options[key].selected = false;
                }
              });
            },
            // filter out selected elements
            selectedElements() {
              return this.options.filter(op => op.selected === true);
            },
            // get selected values
            selectedValues() {
              return this.options.filter(op => op.selected === true).map(el => el.value);
            },
          }));
        });
      });
    </script>
{% endblock %} 