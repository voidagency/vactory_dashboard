<div x-data="{
    items: [],
    draggedItem: null,
    draggedIndex: null,
    searchQuery: '',
    searchResults: [],
    isOpen: false,
    async searchContent() {
        if (this.searchQuery.length < 2) {
            this.searchResults = [];
            this.isOpen = false;
            return;
        }

        try {
            console.log('Searching for:', this.searchQuery);
            const response = await fetch(`/api/vactory-dashboard/cross-content-search?q=${encodeURIComponent(this.searchQuery)}&bundle={{ bundle }}`);
            if (!response.ok) {
                throw new Error('Search failed');
            }

            const data = await response.json();
            console.log('Search results:', data);
            this.searchResults = data;
            this.isOpen = true;
        } catch (error) {
            console.error('Search error:', error);
            this.searchResults = [];
        }
    },
    init() {
        // Initialize items from formData if exists
        if (formData.fields[field.name]) {
            const selectedKeys = Array.isArray(formData.fields[field.name]) 
                ? formData.fields[field.name] 
                : [formData.fields[field.name]];
            
            this.items = selectedKeys.map((key, index) => ({
                id: key,
                title: field.options[key]
            }));
            this.updateFormData();
        }
    },
    updateFormData() {
        formData.fields[field.name] = this.items.map(item => item.id);
    },
    handleDragStart(event, index) {
        this.draggedItem = this.items[index];
        this.draggedIndex = index;
        event.target.classList.add('bg-gray-100');
    },
    handleDragEnd(event) {
        event.target.classList.remove('bg-gray-100');
    },
    handleDrop(event) {
        const targetIndex = parseInt(event.target.closest('tr')?.dataset.index);
        if (isNaN(targetIndex)) return;

        const items = [...this.items];
        items.splice(this.draggedIndex, 1);
        items.splice(targetIndex, 0, this.draggedItem);
        this.items = items;
        this.updateFormData();
    },
    moveItem(index, direction) {
        const items = [...this.items];
        if (direction === 'up' && index > 0) {
            [items[index], items[index - 1]] = [items[index - 1], items[index]];
        } else if (direction === 'down' && index < items.length - 1) {
            [items[index], items[index + 1]] = [items[index + 1], items[index]];
        }
        this.items = items;
        this.updateFormData();
    },
    removeItem(index) {
        this.items.splice(index, 1);
        this.updateFormData();
    },
    addItem(result) {
        if (!this.items.find(item => item.id === result.id)) {
            this.items.push({
                id: result.id,
                title: result.title
            });
            this.updateFormData();
        }
        this.searchQuery = '';
        this.isOpen = false;
    }
}">
    {# Search Input #}
    <div class="border-b border-gray-200 bg-white px-4 py-4 shadow-sm ring-1 ring-gray-900/5 mb-4">
        <div class="relative">
            <label for="search" class="sr-only">{{ "Rechercher un contenu"|t }}</label>
            <div class="relative">
                <input
                        type="text"
                        name="search"
                        id="search"
                        x-model="searchQuery"
                        @input.debounce.300ms="searchContent()"
                        @focus="isOpen = searchResults.length > 0"
                        @click.away="isOpen = false"
                        class="block w-full rounded-md border-0 py-1.5 pl-10 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 text-sm leading-6"
                        placeholder="{{ 'Rechercher et ajouter un contenu'|t }}"
                >
                <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd"
                              d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
                              clip-rule="evenodd"/>
                    </svg>
                </div>
            </div>

            {# Search Results Dropdown #}
            <div
                    x-show="isOpen && searchResults.length > 0"
                    x-cloak
                    x-transition:enter="transition ease-out duration-200"
                    x-transition:enter-start="opacity-0 translate-y-1"
                    x-transition:enter-end="opacity-100 translate-y-0"
                    x-transition:leave="transition ease-in duration-150"
                    x-transition:leave-start="opacity-100 translate-y-0"
                    x-transition:leave-end="opacity-0 translate-y-1"
                    class="absolute z-[999] left-0 right-0 mt-2 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 max-h-60 overflow-y-auto"
                    style="min-width: 100%;"
                    role="listbox">
                <template x-for="result in searchResults" :key="result.id">
                    <button
                            @click="addItem(result)"
                            type="button"
                            @mousedown.prevent
                            class="block w-full px-4 py-2 text-left text-sm hover:bg-gray-100 focus:bg-gray-100 focus:outline-none"
                            role="option">
                        <div class="flex items-center">
                            <span x-text="result.title" class="font-medium"></span>
                        </div>
                    </button>
                </template>
            </div>

            <div
                    x-show="searchQuery.length >= 2 && searchResults.length === 0"
                    x-cloak
                    class="absolute z-[999] left-0 right-0 mt-2 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 py-2 px-4">
                <span class="text-sm text-gray-500">{{ "Aucun résultat trouvé"|t }}</span>
            </div>
        </div>
    </div>

    {# Items Table #}
    <table class="min-w-full divide-y divide-gray-300 border border-gray-200 bg-white">
        <thead class="bg-gray-100">
        <tr>
            <th scope="col"
                class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">{{ "PRIORITÉ"|t }}</th>
            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">{{ "TITRE"|t }}</th>
            <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                <span class="sr-only">{{ "Actions"|t }}</span>
            </th>
        </tr>
        </thead>
        <tbody class="divide-y divide-gray-200"
               @dragover.prevent
               @drop.prevent="handleDrop($event)">
        <template x-for="(item, index) in items" :key="item.id">
            <tr draggable="true"
                :data-index="index"
                :data-id="item.id"
                @dragstart="handleDragStart($event, index)"
                @dragend="handleDragEnd"
                class="hover:bg-gray-50 cursor-move">
                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                    <div class="flex items-center">
                        <span x-text="index + 1" class="mr-2"></span>
                        <div class="flex flex-col gap-1">
                            <button type="button" @click="moveItem(index, 'up')" :disabled="index === 0"
                                    class="text-primary-400 hover:primary-gray-600 disabled:text-gray-400">
                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M5 15l7-7 7 7"/>
                                </svg>
                            </button>
                            <button type="button" @click="moveItem(index, 'down')"
                                    :disabled="index === items.length - 1"
                                    class="text-primary-400 hover:primary-gray-600 disabled:text-gray-400">
                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M19 9l-7 7-7-7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500" x-text="item.title"></td>
                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                    <button type="button" @click="removeItem(index)" class="text-red-600 hover:text-red-900">
                        {{ "Retirer"|t }}
                    </button>
                </td>
            </tr>
        </template>
        </tbody>
    </table>
</div>