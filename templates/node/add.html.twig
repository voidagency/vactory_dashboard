{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
    {% if type == 'page' %}
        {% include "@vactory_dashboard/node/add-vactory-page.html.twig" %}
    {% endif %}
    {% if type == 'not_page' %}
        {% include "@vactory_dashboard/node/add-node.html.twig" %}
    {% endif %}
{% endblock %}

{% block javascripts %}
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.data('pageEditor', (config) => ({
          loaderCK: false,
          bundle: config.bundle,
          bundle_label: config.bundle_label,
          fields: config.fields ?? {},
          formData: {
            fields: {},
            status: true,
          },
          language: config.language,
          activeTab: 'content',
          blocks: [],
          settings: {
            title: '',
            alias: '',
            status: true,
          },
          seo: {},
          showBlocksModal: false,
          showBlockForm: false,
          showTemplatesList: false,
          showParagraphBlockForm: false,
          selectedTemplate: null,
          paragraphBlockForm: {
            blockType: '',
            content: '',
            config: {
              title: '',
              show_title: false,
              width: 'full_width',
              spacing: '_none',
              css_classes: '',
            },
          },
          blockForm: {
            extra_fields: {},
            fields: {},
            items: [],
            config: {
              title: '',
              show_title: false,
              width: 'full_width',
              spacing: '_none',
              css_classes: '',
            },
          },
          currentBlockIndex: null,
          dragStartIndex: null,
          dragStartItemIndex: null,
          inputLabelsList: {},
          inputLabels: {},
          suggestions: {},

          // node
          get contentFields() {
            return Object.fromEntries(
              Object.entries(this.fields).filter(([key, field]) => field.type !== 'field_cross_content'),
            );
          },
          get crossContentFields() {
            return Object.fromEntries(
              Object.entries(this.fields).filter(([key, field]) => field.type === 'field_cross_content'),
            );
          },
          async fetchSuggestions(fieldName, query) {
              if (!query || query.length < 1) {
               this.suggestions[fieldName] = [];
               return;
              }
              try {
              const response = await fetch(`{{ path('vactory_dashboard.autocomplete') }}?field=${fieldName}&q=${encodeURIComponent(query)}&bundle=${this.bundle}`);
              if (!response.ok) throw new Error('Failed to fetch suggestions');
              const data = await response.json();
              this.suggestions[fieldName] = data.results;
              } catch (e) {
              console.error(e);
              this.suggestions[fieldName] = [];
             }
            },

          selectSuggestion(fieldName, item) {
            this.formData.fields[fieldName] = item.id;       
            this.inputLabels[fieldName] = item.label;        
            this.suggestions[fieldName] = [];
            },
          validateForm() {
            const form = document.getElementById('node-form');
            const requiredInputs = form.querySelectorAll('[required]');
            let isValid = true;
            requiredInputs.forEach(input => {
              if (!input.value) {
                console.log({input})
                input.classList.add('border-red-500');
                isValid = false;
              }
            });

            return isValid;
          },
          async saveNode() {
            /*if (!this.validateForm()) {
              this.showNotification('error', '{{ "Please fill in all required fields"|t }}');
              return;
            }*/

      

            console.log('fileds', this.formData.fields);

            if (this.isSaving) {
              return;
            }
            this.isSaving = true;

            try {
              const response = await fetch(`/api/vactory-dashboard/${this.bundle}/node/save`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  bundle: this.bundle,
                  language: this.language,
                  seo: this.seo,
                  blocks: this.blocks,
                  fields: this.formData.fields,
                  status: this.formData.status,
                }),
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || '{{ 'Failed to save node'|t }}');
              }

              this.showNotification('success', '{{ 'Node created successfully'|t }}');
              
              window.location.href = data?.list;
            } catch (error) {
              console.error('Error saving node:', error);
              this.showNotification('error', error.message);
            } finally {
              this.isSaving = false;
            }
          },
          // end node

          formID: null,
          generateRandomString(length) {
            let result = '';
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            const charactersLength = characters.length;
            for (let i = 0; i < length; i++) {
              result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
          },
          getForm(id, index = -1, isMultiple = false, isSingle = false, isExtra = false, isGroup = false, defaultValue = '') {
            this.loaderCK = true;
            fetch('/api/dashboard/wysiwyg', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                isMultiple,
                isSingle,
                isExtra,
                isGroup,
                defaultValue,
              }),
            })
              .then(res => res.json())
              .then(data => {
                const targetClass = (isMultiple && isGroup) ? '.wysiwyg-group-container' : '.wysiwyg-container';

                if (index >= 0) {
                  let draggable = document.querySelector(`[data-item-index="${index}"]`);
                  let element = draggable.querySelector(targetClass);
                  element.innerHTML = data.html;
                  Drupal.attachBehaviors(element);
                } else {
                  const container = document.getElementById(id);
                  container.innerHTML = data.html;
                  Drupal.attachBehaviors(container);
                }
              })
              .catch(e => {
                console.log('error: ', e);
              })
              .finally(() => {
                this.loaderCK = false;
              });
          },
          dragStart(event) {
            this.dragStartIndex = parseInt(event.target.dataset.index);
            event.dataTransfer.effectAllowed = 'move';
          },
          dragStartItem(event) {
            this.dragStartItemIndex = parseInt(event.target.dataset.index);
            event.dataTransfer.effectAllowed = 'move';
          },
          dragEnd(event) {
            const dragEndIndex = parseInt(event.target.closest('[draggable]').dataset.index);

            if (this.dragStartIndex !== null && dragEndIndex !== null && this.dragStartIndex !== dragEndIndex) {
              // Remove the dragged item
              const [draggedItem] = this.blocks.splice(this.dragStartIndex, 1);
              // Insert it at the new position
              this.blocks.splice(dragEndIndex, 0, draggedItem);

              // Reset drag state
              this.dragStartIndex = null;

              // Show success notification
              this.showNotification('success', '{{ 'Block order updated'|t }}');
            }
          },
          dragEndItem(event) {
            const dragEndIndex = parseInt(event.target.closest('[draggable]').dataset.index);

            if (this.dragStartItemIndex !== null && dragEndIndex !== null && this.dragStartItemIndex !== dragEndIndex) {
              // Remove the dragged item
              const [draggedItem] = this.blockForm.items.splice(this.dragStartItemIndex, 1);
              // Insert it at the new position
              this.blockForm.items.splice(dragEndIndex, 0, draggedItem);

              // Reset drag state
              this.dragStartItemIndex = null;

              // Show success notification
              this.showNotification('success', '{{ 'Item order updated'|t }}');
            }
          },
          async modifyBlock(index) {
            const block = this.blocks[index];
            this.currentBlockIndex = index;
            // Find the template that matches this block
            const template = block.widget_config;
            this.selectedTemplate = template;
            // Initialize the form data structure
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: template.name || '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };

            if (template.multiple) {
              // For multiple items, widget_data is an object with numeric keys (0, 1, 2, etc.)
              const items = [];
              let i = 0;
              while (block.widget_data[i] !== undefined) {
                const item = block.widget_data[i];
                const mappedItem = {};
                // Map each field in the item
                Object.keys(template.fields).forEach(fieldName => {

                  // START - multiple field - group
                  if (fieldName.startsWith('group_')) {
                    Object.keys(template.fields[fieldName]).forEach((itemName, index) => {

                      if (!mappedItem[fieldName]) {
                        mappedItem[fieldName] = {};
                      }

                      if (template.fields[fieldName][itemName].type === 'text_format') {
                        mappedItem[fieldName][itemName] = item[fieldName]?.[itemName]?.value || '';
                        this.getForm(`wysi-${this.generateRandomString(4)}`, i, true, false, false, true, item[fieldName]?.[itemName]?.value || '');
                      } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName][itemName].type)) {
                        const imageKey = Object.keys(item?.[fieldName][itemName] ?? {})?.[0] ?? null;
                        const imageData = item?.[fieldName]?.[itemName]?.[imageKey] ?? {};
                        const imageId = imageData?.selection?.[0]?.target_id ?? null;
                        if (imageId) {
                          mappedItem[fieldName][itemName] = {
                            id: imageId,
                            url: imageData.selection[0].url,
                            name: imageData.name,
                            path: 'items.' + i + '.' + fieldName + '.' + itemName,
                            key: imageKey,
                          };
                        } else {
                          mappedItem[fieldName][itemName] = {
                            id: null,
                            url: null,
                            name: null,
                            path: 'items.' + i + '.' + fieldName + '.' + itemName,
                            key: imageKey ?? new Date().getTime(),
                          };
                        }
                      } else if (template.fields[fieldName][itemName].type === 'json_api_collection') {
                        mappedItem[fieldName][itemName] = item[fieldName][itemName];
                      } else {
                        mappedItem[fieldName][itemName] = item[fieldName][itemName];
                      }
                    });
                  }
                  // END - multiple field - group

                  else {
                    if (template.fields[fieldName].type === 'text_format') {
                      mappedItem[fieldName] = item[fieldName].value || '';
                      this.getForm(`wysi-${this.generateRandomString(4)}`, i, true, false, false, false, item[fieldName].value);
                    } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                      const imageKey = Object.keys(item[fieldName])[0];
                      const imageData = item[fieldName][imageKey];
                      const imageId = imageData.selection[0].target_id;
                      if (imageId) {
                        mappedItem[fieldName] = {
                          id: imageId,
                          url: imageData.selection[0].url,
                          name: imageData.name,
                          path: 'items.' + i + '.' + fieldName,
                          key: imageKey,
                        };
                      } else {
                        mappedItem[fieldName] = {
                          id: null,
                          url: null,
                          name: null,
                          path: 'items.' + i + '.' + fieldName,
                          key: imageKey ?? new Date().getTime(),
                        };
                      }
                    } else if (template.fields[fieldName].type === 'json_api_collection') {
                      mappedItem[fieldName] = item[fieldName];
                    } else {
                      mappedItem[fieldName] = item[fieldName] ?? '';
                    }
                  }
                });
                items.push(mappedItem);
                i++;
              }
              this.blockForm.items = items;

              // If no items exist, add one empty item
              if (!this.blockForm.items.length) {
                this.addItem();
              }
            } else {
              // Handle single item case
              // widget_data[0] contains the fields
              if (block.widget_data && block.widget_data[0]) {
                Object.keys(template.fields).forEach((fieldName, index) => {
                  if (block.widget_data[0][fieldName]) {
                    
                    // START - single field group
                    if (fieldName.startsWith('group_')) {
                      Object.keys(template.fields[fieldName]).forEach((itemName, index) => {

                        if (!this.blockForm.fields[fieldName]) {
                          this.blockForm.fields[fieldName] = {};
                        }

                        if (template.fields[fieldName][itemName].type === 'text_format') {
                          this.blockForm.fields[fieldName][itemName] = block.widget_data[0][fieldName][itemName].value || '';
                          this.getForm(`wysi-group-${index}-${itemName}`, -1, false, true, false, true, block.widget_data[0][fieldName][itemName].value);
                        } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName][itemName].type)) {
                          const imageKey = Object.keys(block.widget_data[0][fieldName][itemName])[0];
                          const imageData = block.widget_data[0][fieldName][itemName][imageKey];
                          const imageId = imageData?.selection ? imageData?.selection[0]?.target_id : null;
                          if (imageId) {
                            this.blockForm.fields[fieldName][itemName] = {
                              id: imageId ?? null,
                              url: imageData?.selection[0]?.url ?? null,
                              name: imageData?.name ?? null,
                              path: 'fields.' + fieldName + '.' + itemName,
                              key: imageKey,
                            };
                          } else {
                            this.blockForm.fields[fieldName][itemName] = {
                              id: null,
                              url: null,
                              name: null,
                              path: 'fields.' + fieldName + '.' + itemName,
                              key: imageKey ?? new Date().getTime(),
                            };
                          }
                        } else if (template.fields[fieldName][itemName].type === 'json_api_collection') {
                          this.blockForm.fields[fieldName][itemName] = block.widget_data[0][fieldName][itemName];
                        } else {
                          this.blockForm.fields[fieldName][itemName] = block.widget_data[0][fieldName][itemName];
                        }
                      });
                    } 
                    // END - single field group
                    
                    // START - single field
                    else {
                      if (template.fields[fieldName].type === 'text_format') {
                        this.blockForm.fields[fieldName] = block.widget_data[0][fieldName].value || '';
                        this.getForm(`wysi-single-${index}`, -1, false, true, false, false, block.widget_data[0][fieldName].value);
                      } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                        const imageKey = Object.keys(block.widget_data[0][fieldName])[0];
                        const imageData = block.widget_data[0][fieldName][imageKey];
                        const imageId = imageData?.selection ? imageData?.selection[0]?.target_id : null;
                        if (imageId) {
                          this.blockForm.fields[fieldName] = {
                            id: imageId ?? null,
                            url: imageData?.selection[0]?.url ?? null,
                            name: imageData?.name ?? null,
                            path: 'fields.' + fieldName,
                            key: imageKey,
                          };
                        } else {
                          this.blockForm.fields[fieldName] = {
                            id: null,
                            url: null,
                            name: null,
                            path: 'fields.' + fieldName,
                            key: imageKey ?? new Date().getTime(),
                          };
                        }
                      } else if (template.fields[fieldName].type === 'json_api_collection') {
                        this.blockForm.fields[fieldName] = block.widget_data[0][fieldName];
                      } else {
                        this.blockForm.fields[fieldName] = block.widget_data[0][fieldName];
                      }
                    }
                    // END - single field
                    
                  }
                });
              }
            }

            // Handle extra fields if they exist
            if (block.widget_data.extra_field) {
              Object.keys(template.extra_fields || {}).forEach((fieldName, index) => {
                if (block.widget_data.extra_field[fieldName]) {

                  // START - extra field group
                  if (fieldName.startsWith('group_')) {
                    Object.keys(template.extra_fields[fieldName] || {}).forEach((itemName, index) => {

                      if (!this.blockForm.extra_fields[fieldName]) {
                        this.blockForm.extra_fields[fieldName] = {};
                      }

                      if (template.extra_fields[fieldName][itemName].type === 'text_format') {
                        this.blockForm.extra_fields[fieldName][itemName] = block.widget_data.extra_field[fieldName][itemName].value || '';
                        this.getForm(`wysi-groupextra-${index}-${itemName}`, -1, false, false, true, true, block.widget_data.extra_field[fieldName][itemName].value || '');
                      } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName][itemName].type)) {
                        const imageKey = Object.keys(block.widget_data.extra_field[fieldName][itemName])[0];
                        const imageData = block.widget_data.extra_field[fieldName][itemName][imageKey];
                        const imageId = imageData.selection[0].target_id;
                        if (imageId) {
                          this.blockForm.extra_fields[fieldName][itemName] = {
                            id: imageId,
                            url: imageData.selection[0].url,
                            name: imageData.name,
                            path: 'extra_fields.' + fieldName + '.' + itemName,
                            key: imageKey,
                          };
                        } else {
                          this.blockForm.extra_fields[fieldName][itemName] = {
                            id: null,
                            url: null,
                            name: null,
                            path: 'extra_fields.' + fieldName + '.' + itemName,
                            key: imageKey ?? new Date().getTime(),
                          };
                        }
                      } else if (template.extra_fields[fieldName][itemName].type === 'json_api_collection') {
                        this.blockForm.extra_fields[fieldName][itemName] = block.widget_data.extra_field[fieldName][itemName];
                      } else {
                        this.blockForm.extra_fields[fieldName][itemName] = block.widget_data.extra_field[fieldName][itemName];
                      }
                    });
                  } 
                  // END - extra field group

                  // START - extra field
                  else {
                    if (template.extra_fields[fieldName].type === 'text_format') {
                      this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName].value || '';
                      this.getForm(`wysi-extra-${index}`, -1, false, false, true, false, block.widget_data.extra_field[fieldName].value || '');
                    } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName].type)) {
                      const imageKey = Object.keys(block.widget_data.extra_field[fieldName])[0];
                      const imageData = block.widget_data.extra_field[fieldName][imageKey];
                      const imageId = imageData.selection[0].target_id;
                      if (imageId) {
                        this.blockForm.extra_fields[fieldName] = {
                          id: imageId,
                          url: imageData.selection[0].url,
                          name: imageData.name,
                          path: 'extra_fields.' + fieldName,
                          key: imageKey,
                        };
                      } else {
                        this.blockForm.extra_fields[fieldName] = {
                          id: null,
                          url: null,
                          name: null,
                          path: 'extra_fields.' + fieldName,
                          key: imageKey ?? new Date().getTime(),
                        };
                      }
                    } else if (template.extra_fields[fieldName].type === 'json_api_collection') {
                      this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName];
                    } else {
                      this.blockForm.extra_fields[fieldName] = block.widget_data.extra_field[fieldName];
                    }

                  }
                  // END - extra field

                }
              });
            }

            this.showBlockForm = true;
          },
          saveBlock() {
            let blockData;

            if (this.selectedTemplate.multiple) {
              // For multiple items, convert array to object with numeric keys
              blockData = {};
              this.blockForm.items.forEach((item, index) => {
                blockData[index] = {};
                Object.keys(this.selectedTemplate.fields).forEach(fieldName => {

                  // START - multiple field group
                  if (fieldName.startsWith('group_')) {
                    blockData[index][fieldName] = {};
                    Object.keys(this.selectedTemplate.fields[fieldName]).forEach((itemName) => {                      

                      if (this.selectedTemplate.fields[fieldName][itemName].type === 'text_format') {
                        blockData[index][fieldName][itemName] = {
                          value: item[fieldName][itemName] || '',
                          format: 'full_html',
                        };
                      } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName][itemName].type)) {
                        blockData[index][fieldName][itemName] = {
                          [item[fieldName][itemName].key]: {
                            media_library_selection: '',
                            media_library_update_widget: 'Update widget',
                            open_button: 'Add media',
                            name: item?.[fieldName]?.[itemName]?.id ?? '',
                            selection: [
                              {
                                remove_button: 'Remove',
                                target_id: item[fieldName][itemName].id,
                                url: item[fieldName][itemName].url,
                                weight: 0,
                              },
                            ],
                          },
                        };
                      } else {
                        blockData[index][fieldName][itemName] = item[fieldName][itemName];
                      }
                    });
                  }
                  // END - multiple field group

                  else {
                    if (this.selectedTemplate.fields[fieldName].type === 'text_format') {
                      blockData[index][fieldName] = {
                        value: item[fieldName] || '',
                        format: 'full_html',
                      };
                    } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                      blockData[index][fieldName] = {
                        [item[fieldName].key]: {
                          media_library_selection: '',
                          media_library_update_widget: 'Update widget',
                          open_button: 'Add media',
                          name: item[fieldName]?.name ?? '',
                          selection: [
                            {
                              remove_button: 'Remove',
                              target_id: item[fieldName].id,
                              url: item[fieldName].url,
                              weight: 0,
                            },
                          ],
                        },
                      };
                    } else {
                      blockData[index][fieldName] = item[fieldName] ?? '';
                    }
                  }
                });
              });
            } else {
              // For single item, wrap in array with index 0
              blockData = {
                0: {},
              };
              Object.keys(this.selectedTemplate.fields).forEach(fieldName => {

                // START - single field group
                if (fieldName.startsWith('group_')) {
                  Object.keys(this.selectedTemplate.fields[fieldName]).forEach(itemName => {

                    if (!blockData[0][fieldName]) {
                      blockData[0][fieldName] = {};
                    }

                    if (this.selectedTemplate.fields[fieldName][itemName].type === 'text_format') {
                      blockData[0][fieldName][itemName] = {
                        value: this.blockForm.fields[fieldName][itemName] || '',
                        format: 'full_html',
                      };
                    } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName][itemName].type)) {
                      blockData[0][fieldName][itemName] = {
                        [this.blockForm.fields[fieldName][itemName].key]: {
                          media_library_selection: '',
                          media_library_update_widget: 'Update widget',
                          open_button: 'Add media',
                          name: this?.blockForm?.fields?.[fieldName]?.[itemName]?.name ?? '',
                          selection: [
                            {
                              remove_button: 'Remove',
                              target_id: this.blockForm.fields[fieldName][itemName].id,
                              url: this.blockForm.fields[fieldName][itemName].url,
                              weight: 0,
                            },
                          ],
                        },
                      };
                    } else if (this.selectedTemplate.fields[fieldName][itemName].type === 'json_api_collection') {
                      // Nothing to change here
                      blockData[0][fieldName][itemName] = this.blockForm.fields[fieldName][itemName];
                    } else {
                      blockData[0][fieldName][itemName] = this.blockForm.fields[fieldName][itemName] ?? '';
                    }
                  });
                } 
                // END - single field group
                
                // START - single field
                else {
                  if (this.selectedTemplate.fields[fieldName].type === 'text_format') {
                    blockData[0][fieldName] = {
                      value: this.blockForm.fields[fieldName] || '',
                      format: 'full_html',
                    };
                  } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                    blockData[0][fieldName] = {
                      [this.blockForm.fields[fieldName].key]: {
                        media_library_selection: '',
                        media_library_update_widget: 'Update widget',
                        open_button: 'Add media',
                        name: this?.blockForm?.fields?.[fieldName]?.name ?? '',
                        selection: [
                          {
                            remove_button: 'Remove',
                            target_id: this.blockForm.fields[fieldName].id,
                            url: this.blockForm.fields[fieldName].url,
                            weight: 0,
                          },
                        ],
                      },
                    };
                  } else if (this.selectedTemplate.fields[fieldName].type === 'json_api_collection') {
                    // Nothing to change here
                    blockData[0][fieldName] = this.blockForm.fields[fieldName];
                  } else {
                    blockData[0][fieldName] = this.blockForm.fields[fieldName] ?? '';
                  }

                }
                // END - single field


              });
            }

            // Add extra fields if they exist
            if (Object.keys(this.blockForm.extra_fields).length > 0) {
              blockData.extra_field = {};
              Object.keys(this.blockForm.extra_fields).forEach(fieldName => {

                // START - extra field group
                if (fieldName.startsWith('group_')) {

                  if (!blockData.extra_field[fieldName]) {
                    blockData.extra_field[fieldName] = {};
                  }

                  Object.keys(this.blockForm.extra_fields[fieldName]).forEach(itemName => {
                    if (this.selectedTemplate.extra_fields[fieldName][itemName].type === 'text_format') {
                      blockData.extra_field[fieldName][itemName] = {
                        value: this.blockForm.extra_fields[fieldName][itemName] || '',
                        format: 'full_html',
                      };
                    } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.extra_fields[fieldName][itemName].type)) {
                      blockData.extra_field[fieldName][itemName] = {
                        [this.blockForm.extra_fields[fieldName][itemName].key]: {
                          media_library_selection: '',
                          media_library_update_widget: 'Update widget',
                          open_button: 'Add media',
                          name: this?.blockForm?.extra_fields?.[fieldName]?.[itemName]?.name ?? '',
                          selection: [
                            {
                              remove_button: 'Remove',
                              target_id: this.blockForm.extra_fields[fieldName][itemName].id,
                              url: this.blockForm.extra_fields[fieldName][itemName].url,
                              weight: 0,
                            },
                          ],
                        },
                      };
                    } else {
                      blockData.extra_field[fieldName][itemName] = this.blockForm.extra_fields[fieldName][itemName] ?? '';
                    }
                  });
                } 
                // END - extra field group

                // START - extra field
                else {
                  if (this.selectedTemplate.extra_fields[fieldName].type === 'text_format') {
                    blockData.extra_field[fieldName] = {
                      value: this.blockForm.extra_fields[fieldName] || '',
                      format: 'full_html',
                    };
                  } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.extra_fields[fieldName].type)) {
                    blockData.extra_field[fieldName] = {
                      [this.blockForm.extra_fields[fieldName].key]: {
                        media_library_selection: '',
                        media_library_update_widget: 'Update widget',
                        open_button: 'Add media',
                        name: this?.blockForm?.extra_fields?.[fieldName]?.name ?? '',
                        selection: [
                          {
                            remove_button: 'Remove',
                            target_id: this.blockForm.extra_fields[fieldName].id,
                            url: this.blockForm.extra_fields[fieldName].url,
                            weight: 0,
                          },
                        ],
                      },
                    };
                  } else {
                    blockData.extra_field[fieldName] = this.blockForm.extra_fields[fieldName] ?? '';
                  }
                }
                // END - extra field

              });
            }

            if (this.currentBlockIndex !== null) {
              // Modify existing block
              this.blocks[this.currentBlockIndex] = {
                ...this.blocks[this.currentBlockIndex], // Preserve existing ID and other properties
                widget_data: blockData,
                title: this.blockForm.config.title,
                show_title: this.blockForm.config.show_title,
                width: this.blockForm.config.width,
                spacing: this.blockForm.config.spacing,
                css_classes: this.blockForm.config.css_classes,
              };
              this.showNotification('success', '{{ 'Block updated successfully'|t }}');
            } else {
              // Add new block
              this.blocks.push({
                id: Date.now(),
                bundle: "vactory_component",
                is_new: true,
                title: this.blockForm.config.title,
                show_title: this.blockForm.config.show_title,
                width: this.blockForm.config.width,
                spacing: this.blockForm.config.spacing,
                css_classes: this.blockForm.config.css_classes,
                preview: this.selectedTemplate.screenshot,
                widget_id: this.selectedTemplate.uuid,
                widget_config: this.selectedTemplate,
                widget_data: blockData,
              });
              this.showNotification('success', '{{ 'Block added successfully'|t }}');
            }

            // Reset form and close
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };
            this.currentBlockIndex = null;
            this.showBlockForm = false;
          },
          selectTemplate(template) {
            this.selectedTemplate = template;
            this.currentBlockIndex = null; // Reset current block index for new blocks

            // Initialize the form data structure
            this.blockForm = {
              extra_fields: {},
              fields: {},
              items: [],
              config: {
                title: template.name || '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };
            // Initialize extra_fields if they exist
            if (template.extra_fields) {
              Object.keys(template.extra_fields).forEach((fieldName, index) => {
                // START - extra group
                if (fieldName.startsWith('group_')) {
                  Object.keys(template.extra_fields[fieldName]).forEach((itemName, index) => {

                    if (!this.blockForm.extra_fields[fieldName]) {
                      this.blockForm.extra_fields[fieldName] = {}
                    }

                    if (template.extra_fields[fieldName][itemName].type === 'url_extended') {
                      this.blockForm.extra_fields[fieldName][itemName] = {
                        title: '',
                        url: '',
                        attributes: {
                          label: '',
                          class: '',
                          id: 'link-' + Math.random().toString(36).slice(2),
                          target: '',
                          rel: '',
                        },
                      };
                    } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName][itemName].type)) {
                      this.blockForm.extra_fields[fieldName][itemName] = {
                        id: null,
                        url: null,
                        name: null,
                        path: 'extra_fields.' + fieldName + '.' + 'itemName',
                        key: new Date().getTime(),
                      };
                    } else if (template.extra_fields[fieldName][itemName].type === 'json_api_collection') {
                      // Nothing to change here
                      this.blockForm.extra_fields[fieldName][itemName] = template.extra_fields[fieldName][itemName]['options']['#default_value'];
                    } else if (template.extra_fields[fieldName][itemName].type === 'text_format') {
                      this.getForm(`wysi-groupextra-${index}-${itemName}`, -1, false, false, true, true);
                    } else {
                      this.blockForm.extra_fields[fieldName][itemName] = '';
                    }
                    
                  });
                }
                // END - extra group

                
                // START - extra
                else {
                  // Initialize url_extended fields with both title and url
                  if (template.extra_fields[fieldName].type === 'url_extended') {
                    this.blockForm.extra_fields[fieldName] = {
                      title: '',
                      url: '',
                      attributes: {
                        label: '',
                        class: '',
                        id: 'link-' + Math.random().toString(36).slice(2),
                        target: '',
                        rel: '',
                      },
                    };
                  } else if (['image', 'file', 'remote_video'].includes(template.extra_fields[fieldName].type)) {
                    this.blockForm.extra_fields[fieldName] = {
                      id: null,
                      url: null,
                      name: null,
                      path: 'extra_fields.' + fieldName,
                      key: new Date().getTime(),
                    };
                  } else if (template.extra_fields[fieldName].type === 'json_api_collection') {
                    // Nothing to change here
                    this.blockForm.extra_fields[fieldName] = template.extra_fields[fieldName]['options']['#default_value'];
                  } else if (template.extra_fields[fieldName].type === 'text_format') {
                    this.getForm(`wysi-extra-${index}`, -1, false, false, true, false);
                  } else {
                    this.blockForm.extra_fields[fieldName] = '';
                  }
                }
                // END - extra
              });
            }

            // Initialize fields or first item based on multiple flag
            if (template.multiple) {
              this.addItem(); // Add first item
            } else {
              Object.keys(template.fields).forEach((fieldName, index) => {
                console.log('template.fields[fieldName]', template.fields[fieldName]);
                // Initialize url_extended fields with both title and url

                // START - single group
                if (fieldName.startsWith('group_')) {
                  Object.keys(template.fields[fieldName]).forEach((itemName, index) => {
                    if (!this.blockForm.fields[fieldName]) {
                      this.blockForm.fields[fieldName] = {};
                    }

                    if (template.fields[fieldName][itemName].type === 'url_extended') {
                      this.blockForm.fields[fieldName][itemName] = {
                        title: '',
                        url: '',
                        attributes: {
                          label: '',
                          class: '',
                          id: 'link-' + Math.random().toString(36).slice(2),
                          target: '',
                          rel: '',
                        },
                      };
                    } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName][itemName].type)) {
                      this.blockForm.fields[fieldName][itemName] = {
                        id: null,
                        url: null,
                        name: null,
                        path: 'fields.' + fieldName + '.' + itemName,
                        key: Math.random().toString(36).slice(2),
                      };
                    } else if (template.fields[fieldName][itemName].type === 'json_api_collection') {
                      this.blockForm.fields[fieldName][itemName] = template.fields[fieldName][itemName]['options']['#default_value'];
                    } else if (template.fields[fieldName][itemName].type === 'text_format') {
                      this.getForm(`wysi-group-${index}-${itemName}`, -1, false, true, false, true);
                    } else {
                      this.blockForm.fields[fieldName][itemName] = '';
                    }
                  });
                } 
                // END - single group

                // START - single
                else {
                  // Initialize url_extended fields with both title and url
                  if (template.fields[fieldName].type === 'url_extended') {
                    this.blockForm.fields[fieldName] = {
                      title: '',
                      url: '',
                      attributes: {
                        label: '',
                        class: '',
                        id: 'link-' + Math.random().toString(36).slice(2),
                        target: '',
                        rel: '',
                      },
                    };
                  } else if (['image', 'file', 'remote_video'].includes(template.fields[fieldName].type)) {
                    this.blockForm.fields[fieldName] = {
                      id: null,
                      url: null,
                      name: null,
                      path: 'fields.' + fieldName,
                      key: new Date().getTime(),
                    };
                  } else if (template.fields[fieldName].type === 'json_api_collection') {
                    this.blockForm.fields[fieldName] = template.fields[fieldName]['options']['#default_value'];
                  } else if (template.fields[fieldName].type === 'text_format') {
                    this.getForm(`wysi-single-${index}`, -1, false, true, false, false);
                  } else {
                    this.blockForm.fields[fieldName] = '';
                  }
                }
                // END - single

              });
            }
            this.showBlocksModal = false;
            this.showBlockForm = true;
            this.showTemplatesList = false;
          },
          handleAddBlock() {
            // Show the paragraph block form
            this.showBlocksModal = false;
            this.showParagraphBlockForm = true;
            this.showTemplatesList = false;
          },
          saveParagraphBlock() {
            // Validate form
            const form = document.getElementById('paragraph-block-form');
            const requiredInputs = form.querySelectorAll('[required]');
            let isValid = true;

            requiredInputs.forEach(input => {
              if (!input.value) {
                input.classList.add('border-red-500');
                isValid = false;
              }
            });

            if (!isValid) {
              this.showNotification('error', '{{ "Please fill in all required fields"|t }}');
              return;
            }
            if (this.currentBlockIndex !== null) {
              // Modify existing block
              this.blocks[this.currentBlockIndex] = {
                ...this.blocks[this.currentBlockIndex], // Preserve existing ID and other properties
                title: this.paragraphBlockForm.config.title,
                show_title: this.paragraphBlockForm.config.show_title,
                width: this.paragraphBlockForm.config.width,
                spacing: this.paragraphBlockForm.config.spacing,
                css_classes: this.paragraphBlockForm.config.css_classes,
                blockType: this.paragraphBlockForm.blockType,
                content: this.paragraphBlockForm.content,
              };
              this.showNotification('success', '{{ "Paragraph block updated successfully"|t }}');
            } else {
              // Add new paragraph block to blocks array
              this.blocks.push({
                id: Date.now(),
                bundle: "vactory_paragraph_block",
                is_new: true,
                title: this.paragraphBlockForm.config.title,
                show_title: this.paragraphBlockForm.config.show_title,
                width: this.paragraphBlockForm.config.width,
                spacing: this.paragraphBlockForm.config.spacing,
                css_classes: this.paragraphBlockForm.config.css_classes,
                blockType: this.paragraphBlockForm.blockType,
                content: this.paragraphBlockForm.content,
                preview: '/modules/custom/vactory_dashboard/assets/images/default-screenshot.png', // Default preview image
              });
              this.showNotification('success', '{{ "Paragraph block added successfully"|t }}');
            }

            // Reset form
            this.paragraphBlockForm = {
              blockType: '',
              content: '',
              config: {
                title: '',
                show_title: false,
                width: 'full_width',
                spacing: '_none',
                css_classes: '',
              },
            };

            // Close form and reset current block index
            this.showParagraphBlockForm = false;
            this.currentBlockIndex = null;
          },
          modifyParagraphBlock(index) {
            const block = this.blocks[index];
            this.currentBlockIndex = index;
            
            // Initialize the paragraph block form with existing data
            this.paragraphBlockForm = {
              blockType: block.blockType || '',
              content: block.content || '',
              config: {
                title: block.title || '',
                show_title: block.show_title || false,
                width: block.width || 'full_width',
                spacing: block.spacing || '_none',
                css_classes: block.css_classes || '',
              },
            };

            // Show the paragraph block form
            this.showParagraphBlockForm = true;
            this.showBlockForm = false;
            this.showBlocksModal = false;
            this.showTemplatesList = false;
          },
          blockSearch: '',
          blockCategory: 'all',
          templates: [],
          categories: [],
          isLoadingTemplates: false,
          async fetchTemplates() {
            this.isLoadingTemplates = true;
            try {
              const response = await fetch('/api/vactory-dashboard/templates');
              const result = await response.json();
              if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch templates');
              }

              // Transform the nested object into a flat array and extract categories
              const categoriesSet = new Set();
              const templatesArray = [];

              Object.entries(result.data).forEach(([category, templates]) => {
                categoriesSet.add(category);
                Object.entries(templates).forEach(([id, template]) => {
                  templatesArray.push({
                    ...template,
                    id: template.uuid,
                    category: category,
                  });
                });
              });

              this.templates = templatesArray;
              this.categories = Array.from(categoriesSet);
            } catch (error) {
              console.error('Error fetching templates:', error);
              this.showNotification('error', error.message || '{{ 'Failed to load templates'|t }}');
            } finally {
              this.isLoadingTemplates = false;
            }
          },
          get filteredTemplates() {
            return this.templates.filter(template => {
              const matchesSearch = template.name.toLowerCase().includes(this.blockSearch.toLowerCase());
              const matchesCategory = this.blockCategory === 'all' || template.category === this.blockCategory;
              return matchesSearch && matchesCategory;
            });
          },
          addItem() {
            const newItem = {};
            // Initialize all fields with empty values
            Object.keys(this.selectedTemplate.fields).forEach((fieldName, index) => {

              // START - multiple group
              if (fieldName.startsWith('group_')) {
                Object.keys(this.selectedTemplate.fields[fieldName]).forEach((itemName, index) => {

                  if (!newItem[fieldName]) {
                    newItem[fieldName] = {};
                  }

                  if (this.selectedTemplate.fields[fieldName][itemName].type === 'url_extended') {
                    newItem[fieldName][itemName] = {
                      title: '',
                      url: '',
                      attributes: {
                        label: '',
                        class: '',
                        id: 'link-' + Math.random().toString(36).slice(2),
                        target: '',
                        rel: '',
                      },
                    };
                  } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName][itemName].type)) {
                    newItem[fieldName][itemName] = {
                      id: null,
                      url: null,
                      name: null,
                      path: 'items.' + this.blockForm.items.length + '.' + fieldName + '.' + itemName,
                      key: new Date().getTime(),
                    };
                  } else if (this.selectedTemplate.fields[fieldName][itemName].type === 'json_api_collection') {
                    // Nothing to change here
                    newItem[fieldName][itemName] = this.selectedTemplate.fields[fieldName][itemName]['options']['#default_value'];
                  } else {
                    newItem[fieldName][itemName] = '';
                  }
                });
              }
              // END - multiple group

              else {
                // Initialize url_extended fields with both title and url
                if (this.selectedTemplate.fields[fieldName].type === 'url_extended') {
                  newItem[fieldName] = {
                    title: '',
                    url: '',
                    attributes: {
                      label: '',
                      class: '',
                      id: 'link-' + Math.random().toString(36).slice(2),
                      target: '',
                      rel: '',
                    },
                  };
                } else if (['image', 'file', 'remote_video'].includes(this.selectedTemplate.fields[fieldName].type)) {
                  newItem[fieldName] = {
                    id: null,
                    url: null,
                    name: null,
                    path: 'items.' + this.blockForm.items.length + '.' + fieldName,
                    key: new Date().getTime(),
                  };
                } else if (this.selectedTemplate.fields[fieldName].type === 'json_api_collection') {
                  // Nothing to change here
                  newItem[fieldName] = this.selectedTemplate.fields[fieldName]['options']['#default_value'];
                } else {
                  newItem[fieldName] = '';
                }
              }

            });

            // Add the new item with highlighted state
            newItem._isNewItem = true;
            this.blockForm.items.push(newItem);

            // Scroll to the new item after DOM update
            this.$nextTick(() => {
              const newItemIndex = this.blockForm.items.length - 1;
              const newItemElement = document.querySelector(`[data-item-index="${newItemIndex}"]`);
              if (newItemElement) {
                newItemElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                const hasGroupField = Object.keys(this.selectedTemplate.fields).some(fieldName =>
                  fieldName.startsWith('group_')
                );

                this.getForm('', newItemIndex, true, false, false, hasGroupField);

                // Remove highlight after 3 seconds
                setTimeout(() => {
                  newItem._isNewItem = false;
                }, 3000);
              }
            });
          },
          removeItem(index) {
            this.blockForm.items.splice(index, 1);
          },
          isSaving: false,
          notification: {
            show: false,
            type: 'success',
            message: '',
            timeout: null,
          },
          init() {
            // Fetch templates when component initializes
            this.fetchTemplates();

            this.fields = JSON.parse(this.fields);
            // Initialize form data based on fields
            Object.keys(this.fields).forEach((fieldKey) => {
              const field = this.fields[fieldKey];

              if (field?.textFormatField) {
                setTimeout(() => {
                  const label = document.getElementById(`edit-${field.name.replaceAll('_', '-')}-format-help`);
                  label.style.display = 'none';
                  Drupal.editors.ckeditor5.onChange(document.getElementById(`edit-${field.name.replaceAll('_', '-')}-value`), () => {
                    const ckInstance = Drupal.CKEditor5Instances.values().next().value;
                    this.formData.fields[field.name] = ckInstance.getData();
                  });
                }, '2000');
              }

              // Autocomplete multiple
            if (field.type === 'autocomplete' && field.multiple) {
               this.formData.fields[fieldKey] = [];
               this.inputLabels[fieldKey] = '';
               this.inputLabelsList[fieldKey] = []; 
               return;
            }

            // Autocomplete simple
            if (field.type === 'autocomplete' && !field.multiple) {
               this.formData.fields[fieldKey] = '';
               this.inputLabels[fieldKey] = '';
               return;
            }

            // Checkboxes
            if (field.type === 'checkboxes') {
                this.formData.fields[fieldKey] = [];
                return;
            }

            // Radios
            if (field.type === 'radios') {
                this.formData.fields[fieldKey] = '';
                return;
            }

            if (field.type === 'daterange') {
                   this.formData.fields[fieldKey] = {
                   value: field.value?.value || '',
                   end_value: field.value?.end_value || ''
                    };
                return;
               }

              if (field.type === 'faqfield') {
                this.formData.fields[fieldKey] = Array.isArray(field.value) && field.value.length

                  ? field.value
                  : [{ question: '', answer: '' }];
                return;
              }

              if (field.type === 'image' || field.type === 'file' || field.type === 'remote_video' || field.type === 'private_file') {
                this.formData.fields[fieldKey] = {
                  id: null,
                  url: null,
                  name: null,
                  path: fieldKey,
                  key: new Date().getTime(),
                };
              } else {
                this.formData.fields[fieldKey] = '';
              }
            });

          },

          showNotification(type, message) {
            // Clear any existing timeout
            if (this.notification.timeout) {
              clearTimeout(this.notification.timeout);
            }

            // Show new notification
            this.notification.type = type;
            this.notification.message = message;
            this.notification.show = true;

            // Auto hide after 5 seconds
            this.notification.timeout = setTimeout(() => {
              this.notification.show = false;
            }, 5000);
          },
          async saveChanges() {
            if (this.isSaving) {
              return;
            }
            this.isSaving = true;
            try {
              const response = await fetch("{{ path('vactory_dashboard.node.save') }}", {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  language: this.language,
                  settings: this.settings,
                  seo: this.seo,
                  blocks: this.blocks,
                  status: this.settings.status,
                }),
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || 'Failed to save changes');
              }

              this.showNotification('success', '{{ 'Changes saved successfully'|t }}');
              window.location.href = data?.edit_path;
            } catch (error) {
              console.error('Error saving changes:', error);
              this.showNotification('error', error.message || '{{ 'An error occurred while saving'|t }}');
            } finally {
              this.isSaving = false;
            }
          },
          removeBlock(index) {
            // Remove the block at the specified index
            this.blocks.splice(index, 1);
            // Show success notification
            this.showNotification('success', '{{ 'Block removed successfully'|t }}');
          },
          // Media Library States
          showMediaLibrary: false,
          mediaLoading: false,
          mediaError: null,
          mediaItems: [],
          currentMediaPage: 1,
          totalMediaPages: 1,
          totalMedia: 0,
          mediaFilters: {
            search: '',
            type: 'image',
            limit: Alpine.store('limit'),
          },
          selectedType: 'image',
          selectedMedia: null,
          currentField: null,
          currentFieldPath: null,
          currentFieldIndex: null,
          selectedFieldInfo: null,
          loading: false,
          error: null,
          items: [],
          currentPage: 1,
          totalPages: 1,
          total: 0,
          filters: {
            search: '',
            type: 'image',
            limit: Alpine.store('limit'),
          },
          // Media Library Methods and states (@todo: must be shared across multiple files)
          async loadMedia(page = 1) {
            this.mediaLoading = true;
            this.mediaError = null;
            this.currentMediaPage = page;

            try {
              const params = new URLSearchParams({
                page: this.currentMediaPage.toString(),
                limit: this.mediaFilters.limit.toString(),
                search: this.mediaFilters.search,
                type: this.selectedType,
              });

              const response = await fetch(`{{ path('vactory_dashboard.media.data') }}?${params.toString()}`);

              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des médias"|t }}');
              }

              const data = await response.json();

              this.mediaItems = data.data.map(item => ({
                id: item.id,
                url: item.url,
                name: item.name,
                type: item.type,
              }));
              this.totalMedia = data.total;
              this.totalMediaPages = data.pages;
            } catch (error) {
              console.error('Error loading media:', error);
              this.mediaError = error.message;
              this.mediaItems = [];
            } finally {
              this.mediaLoading = false;
            }
          },
          openMediaLibrary(fieldName, path, key = null, type = 'image') {
            this.selectedType = type;
            this.currentField = fieldName;
            this.currentFieldPath = path;
            this.currentFieldKey = key;
            this.showMediaLibrary = true;
            this.loadMedia(1);
          },
          closeMediaLibrary() {
            this.showMediaLibrary = false;
            this.selectedMedia = null;
            this.currentField = null;
            this.mediaItems = [];
            this.currentMediaPage = 1;
            this.mediaFilters.search = '';
          },
          setValueByPath(obj, path, newValue) {
            const keys = path.split('.');
            const lastKey = keys.pop();
            const target = keys.reduce((o, key) => o[key], obj);
            target[lastKey] = newValue;
          },
          selectMedia(media) {
            this.selectedMedia = media;
            if (!this.selectedMedia || !this.currentField) {
              return;
            }

            // Create the image data structure
            const imageData = {
              id: media.id,
              url: media.url,
              name: media.name,
              path: this.currentFieldPath,
              key: this.currentFieldKey,
            };

            this.setValueByPath(this.blockForm, this.currentFieldPath, imageData);
            this.formData.fields[this.currentFieldPath] = imageData;

            this.closeMediaLibrary();
            this.showNotification('success', '{{ "Media sélectionnée avec succès"|t }}');
          },
          clearImage(fieldName, path, key) {
            // for vactory page.
            this.setValueByPath(this.blockForm, path, {
              id: null,
              url: null,
              name: null,
              path: path,
              key: key ?? new Date().getTime(),
            });

            // for node.
            this.formData.fields[fieldName] = {
              id: null,
              url: null,
              name: null,
              path: fieldName,
              key: new Date().getTime(),
            };
          },
          getFieldValue(fieldName, index = null) {
            if (index !== null) {
              // Handle multiple items case
              return this.blockForm.items[index]?.[fieldName];
            } else {
              // Handle single item case
              return this.blockForm.fields[fieldName];
            }
          },
          getVideoEmbedUrl(url) {
            if (!url) {
              return '';
            }
            const youtubePatterns = [
              /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
              /youtube\.com\/watch\?.*v=([^&\n?#]+)/,
            ];

            for (const pattern of youtubePatterns) {
              const match = url?.match(pattern);
              if (match) {
                const videoId = match[1];
                return `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1`;
              }
            }

            return url;
          },
          selectAutocompleteItem(fieldName, item) {
            if (!this.formData.fields[fieldName].includes(item.id)) {
              this.formData.fields[fieldName].push(item.id); // Stocke uniquement l'id
            if (!this.inputLabelsList[fieldName]) {
              this.inputLabelsList[fieldName] = [];
            }
            this.inputLabelsList[fieldName].push(item.label); // Stocke le label pour affichage
           }
           this.inputLabels[fieldName] = '';
           this.suggestions[fieldName] = [];
          },

          removeAutocompleteItem(fieldName, idx) {
            this.formData.fields[fieldName].splice(idx, 1);
            this.inputLabelsList[fieldName].splice(idx, 1);
          },
        }));
      });
    </script>
{% endblock %}