{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
    <div x-data="translationsData()">
        <div class="mb-6">
            <h1 class="text-2xl font-semibold text-gray-900">{{ 'Traductions mutualisées'|t }}</h1>
        </div>

        <div class="mb-6 bg-white p-3 lg:p-6 rounded-xl shadow-sm border border-gray-100 flex flex-col sm:flex-row items-center justify-between gap-4 flex-wrap">
            <div class="max-lg:w-full flex flex-col sm:flex-row items-center gap-4">
                <div class="relative w-full sm:w-auto">
                    <input type="text"
                           x-model="search"
                           @input.debounce.300ms="fetchTranslations(1)"
                           placeholder="{{ 'Rechercher une traduction...'|t }}"
                           class="w-full sm:w-64 pl-10 pr-4 py-[7px] bg-gray-50 border border-gray-200 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 text-sm leading-6 placeholder:text-gray-400">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                             fill="currentColor">
                            <path fill-rule="evenodd"
                                  d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                  clip-rule="evenodd"/>
                        </svg>
                    </div>
                </div>

                <label class="max-lg:w-full inline-flex items-center px-4 py-2 bg-gray-50 border border-gray-200 rounded-lg">
                    <input type="checkbox"
                           x-model="showOnlyNx"
                           @change="fetchTranslations(1)"
                           class="rounded border-gray-300 text-primary-500 shadow-sm focus:ring-primary-500">
                    <span class="ml-2 text-sm text-gray-700">{{ 'Show Only Nx translations'|t }}</span>
                </label>
            </div>

            {% include '@vactory_admin/components/button/button.twig' with {
                click_handler: 'showAddModal = true',
                text: 'Ajouter une traduction'|t,
                size: 'md',
                icon_left: '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/></svg>',
                variant: 'primary'
            } %}
        </div>

        {# Selection header #}
        <div x-show="selectedTerms.length > 0"
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform -translate-y-2"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform translate-y-0"
             x-transition:leave-end="opacity-0 transform -translate-y-2"
             class="mb-6">
            <div class="bg-white px-4 py-3 sm:px-6 shadow-sm ring-1 ring-gray-900/5 sm:rounded-lg">
                <div class="flex items-center justify-between">
                    <div class="text-sm text-gray-900">
                        <span x-text="selectedTerms.length"></span> {{ "élément(s) sélectionné(s)" | t }}
                    </div>
                    <button type="button" @click="deleteTranslationBulk"
                            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                        {{ "Supprimer la sélection" | t }}
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading state -->
        <template x-if="loading">
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
            </div>
        </template>

        <!-- Error state -->
        <template x-if="error">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span x-text="error"></span>
            </div>
        </template>

        <!-- Empty state -->
        <template x-if="!loading && !error && translations.length === 0">
            <div class="text-center py-12">
                <h3 class="mt-2 text-sm font-medium text-gray-900">{{ "Aucune traduction" | t }}</h3>
                <p class="mt-1 text-sm text-gray-500">{{ "Commencez par ajouter une traduction" | t }}</p>
            </div>
        </template>

        <!-- Translations table -->
        <template x-if="!loading && !error && translations.length > 0">
            <div class="bg-white shadow overflow-x-scroll sm:rounded-lg">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-900 uppercase tracking-wider">{{ 'Source'|t }}</th>
                        <template x-for="(column, index) in columns" :key="index">
                            <td class="text-center max-w-52 truncate whitespace-nowrap py-4 pl-4 pr-3 text-sm text-gray-900"
                                x-text="column"></td>
                        </template>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                      <template x-for="(translation, index) in translations" :key="index">
                          <tr class="hover:bg-gray-50">
                              <td class="px-6 py-4 max-w-52 truncate whitespace-nowrap text-sm text-gray-900"
                                  x-text="translation.source"></td>
                              <template x-for="(lang, idx) in langCodes" :key="lang">
                                  <td
                                          class="text-center max-w-52 truncate px-6 py-4 whitespace-nowrap text-sm text-gray-900"
                                          :dir="lang === 'ar' ? 'rtl' : 'ltr'"
                                          @click=" editing = { source: translation.source, context: translation.context, lang: lang }; $nextTick(() => { $refs.editInput?.focus(); });"
                                  >
                                      <template
                                              x-if="editing.source === translation.source && editing.context === translation.context && editing.lang === lang">
                                          <input
                                                  type="text"
                                                  class="w-fit border rounded px-2 py-1"
                                                  x-ref="editInput"
                                                  x-model="translation.translations[lang]"
                                                  @blur="saveRow(translation)"
                                                  @keydown.enter="saveRow(translation)"
                                          />
                                      </template>
                                      <template
                                              x-if="!(editing.source === translation.source && editing.context === translation.context && editing.lang === lang)">
                                          <span x-text="translation.translations[lang] || '-'"></span>
                                      </template>
                                  </td>
                              </template>
                          </tr>
                      </template>
                    </tbody>
                </table>
            </div>
        </template>

        <!-- Pagination -->
        <template x-if="totalPages > 1">
        <div x-show="!loading && !error && translations.length > 0"
             class="mt-6 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
            <div class="flex flex-1 justify-between sm:hidden">
                <button @click="fetchTranslations(currentPage - 1)"
                        :disabled="currentPage === 1"
                        class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                        :class="{ 'opacity-50 cursor-not-allowed': currentPage === 1 }">
                    {{ 'Précédent'|t }}
                </button>
                <button @click="fetchTranslations(currentPage + 1)"
                        :disabled="currentPage === totalPages"
                        class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                        :class="{ 'opacity-50 cursor-not-allowed': currentPage === totalPages }">
                    {{ 'Suivant'|t }}
                </button>
            </div>
            <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
                <div>
                    <p class="text-sm text-gray-700">
                        {{ 'Affichage de'|t }} <span class="font-medium"
                                                     x-text="((currentPage - 1) * limit) + 1"></span>
                        {{ 'à'|t }} <span class="font-medium" x-text="Math.min(currentPage * limit, total)"></span>
                        {{ 'sur'|t }} <span class="font-medium" x-text="total"></span> {{ 'résultats'|t }}
                    </p>
                </div>
                <div>
                    <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                       <button @click="fetchTranslations(currentPage - 1)" :disabled="currentPage === 1" class="relative inline-flex items-center rounded-l-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 disabled:opacity-50">
					        {{ "Précédent" | t }}
				        </button>
                        <template x-for="page in pages">
                            <button @click="fetchTranslations(page)"
                                    :class="{ 'bg-primary-500 ring-primary-500  text-white': currentPage === page, 'text-gray-900 hover:bg-gray-50': currentPage !== page }"
                                    class="relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300  focus:z-20 focus:outline-offset-0">
                                <span x-text="page"></span>
                            </button>
                        </template>
                        <button @click="fetchTranslations(currentPage + 1)" :disabled="currentPage === totalPages" class="relative ml-3 inline-flex items-center rounded-r-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 disabled:opacity-50">
                            {{ "Suivant" | t }}
                        </button>                       
                    </nav>
                </div>
            </div>
        </div>
        </template>

        <!-- Add translation modal -->
        <div x-show="showAddModal"
             @keydown.escape.window="showAddModal = false"
             x-transition:enter="ease-out duration-300"
             x-transition:enter-start="opacity-0"
             x-transition:enter-end="opacity-100"
             x-transition:leave="ease-in duration-200"
             x-transition:leave-start="opacity-100"
             x-transition:leave-end="opacity-0"
             class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center"
             x-cloak>

            <!-- Modal container -->
            <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">

                <!-- Backdrop -->
                <div class="fixed inset-0 bg-gray-500/75"
                     aria-hidden="true"
                     x-transition:enter="ease-out duration-300"
                     x-transition:enter-start="opacity-0"
                     x-transition:enter-end="opacity-100"
                     x-transition:leave="ease-in duration-200"
                     x-transition:leave-start="opacity-100"
                     x-transition:leave-end="opacity-0">
                </div>

                <!-- Modal panel -->
                <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
                    <div class="flex min-h-full items-center justify-center p-4 text-center sm:p-0">
                        <div class="max-lg:w-full relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-xl sm:p-6"
                             @click.outside="showAddModal = false"
                             x-transition:enter="ease-out duration-300"
                             x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                             x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                             x-transition:leave="ease-in duration-200"
                             x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                             x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">

                            <!-- Modal content -->
                            <div>
                                <div class="mb-3 sm:mb-5">
                                    <h3 class="text-base font-semibold text-gray-900"
                                        id="modal-title">{{ 'Ajouter des traductions'|t }}</h3>
                                </div>
                            </div>

                            <div>
                                <div class="mt-2">
                                    <textarea x-model="keywords" rows="9" name="comment" id="comment"
                                              class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"></textarea>
                                </div>
                            </div>

                            <button @click="importKeywords"
                                    class="mt-3 px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 flex items-center">
                                {{ 'Ajouter'|t }}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Global notification live region, render this permanently at the end of the document -->
        {% include '@vactory_dashboard/_components/notification.html.twig' %}


    </div>
{% endblock %}

{% block javascripts %}
    <script>
      function translationsData() {
        return {
          translations: [],
          selectedTerms: [],
          loading: true,
          error: null,
          search: '',
          showOnlyNx: false,
          showAddModal: false,
          currentPage: 1,
          totalPages: 1,
          columns: [],
          langCodes: [],
          keywords: '',
          modifiedTranslations: new Map(),
          editing: {},
          total: 0,
          limit: Alpine.store('limit'),
          pages: [],

          toggleAll() {
            if (this.selectedTerms.length === this.translations.length) {
              this.selectedTerms = [];
            } else {
              this.selectedTerms = this.translations.map(term => ({ source: term.source, context: term.context }));
            }
          },

          generatePageNumbers(currentPage, totalPages) {
            const pages = [];
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
              startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
              pages.push(i);
            }

            return pages;
          },

          async fetchTranslations(page = 1) {
            this.loading = true;
            this.error = null;
            this.currentPage = page;

            const params = new URLSearchParams({
              page: page,
              limit: this.limit,
              search: this.search,
              nx_only: this.showOnlyNx ? '1' : '0',
            });

            try {
              const response = await fetch(`{{ path('vactory_dashboard.translations.data') }}?${params.toString()}`);
              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des traductions" | t }}');
              }

              const data = await response.json();
              this.translations = data.data;
              this.total = data.total;
              this.totalPages = data.pages;
              this.pages = this.generatePageNumbers(data.page, data.pages);
            } catch (error) {
              console.error('Error loading translations:', error);
              this.error = error.message;
              this.translations = [];
            } finally {
              this.loading = false;
            }
          },

          async fetchLanguages() {
            try {
              const response = await fetch(`{{ path('vactory_dashboard.translations.languages') }}`);
              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des traductions" | t }}');
              }

              const data = await response.json();
              this.columns = data['lang_names'];
              this.langCodes = data['lang_codes'];
            } catch (error) {
              console.error('Error loading translations:', error);
            }
          },

          async deleteTranslation(source, context) {
            if (!confirm('{{ "Êtes-vous sûr de vouloir supprimer cette traduction ?" | t }}')) {
              return;
            }

            try {
              const response = await fetch('{{ path('vactory_dashboard.translations.delete') }}', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ source, context }),
              });

              if (!response.ok) {
                this.setNotification(true, '{{ "Une erreur est survenue lors de la suppression des traduction" | t }}');
                throw new Error('{{ "Une erreur est survenue lors de la suppression de la traduction" | t }}');
              }

              await this.fetchTranslations(1);
              this.setNotification(false, '{{ "Les traductions ont été suprimmé avec succés" | t }}');
            } catch (error) {
              this.error = error.message;
              console.error('Error deleting translation:', error);
              this.setNotification(true, '{{ "Une erreur est survenue lors de la suppression des traduction" | t }}');
            }
          },

          toggleTermSelection(event, translation) {
            if (event.target.checked) {
              this.selectedTerms.push({ source: translation.source, context: translation.context });
            } else {
              this.selectedTerms = this.selectedTerms.filter(t => !(t.source === translation.source && t.context === translation.context));
            }
          },

          async deleteTranslationBulk() {
            if (!confirm("{{ 'Êtes-vous sûr de vouloir supprimer les termes sélectionnés ?' | t }}")) {
              return;
            }

            try {
              const response = await fetch('{{ path("vactory_dashboard.translations.bulk_delete") }}', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  selectedTerms: this.selectedTerms,
                }),
              });

              if (response.ok) {
                await this.fetchTranslations(1);
                this.setNotification(false, '{{ "Les traductions ont été suprimmé avec succés" | t }}');
              } else {
                this.setNotification(true, '{{ "Une erreur est survenue lors de la suppression des traduction" | t }}');
              }
            } catch (error) {
              console.error('Error deleting submissions:', error);
              this.error = error.message;
            } finally {
              this.selectedTerms = [];
            }
          },

          async importKeywords() {
            const response = await fetch(`{{ path('vactory_dashboard.translations.import_front') }}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                keywords: this.keywords,
              }),
            });
            const result = await response.json();
            if (result.status == 'ok') {
              await this.fetchTranslations(1);
              this.setNotification(false, '{{ "Les termes ont été importé avec success" | t }}');
              this.showAddModal = false;
            } else {
              this.setNotification(true, '{{ "L import des termes a échoué" | t }}');
              this.showAddModal = false;
            }
          },

          saveRow(translation) {
            const raw = Alpine.raw(translation.translations);
            const plainTranslations = Object.fromEntries(Object.entries(raw));

            this.editing = {};

            fetch('{{ path("vactory_dashboard.translations.edit") }}', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                source: translation.source,
                context: translation.context,
                translations: plainTranslations,
              }),
            })
              .then(response => {
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                return response.json();
              })
              .then(data => {
              })
              .catch(error => {
                console.error('Save failed:', error);
              });
          },

          init() {
            this.fetchLanguages();
            this.fetchTranslations(1);
          },
        };
      }
    </script>
{% endblock %}