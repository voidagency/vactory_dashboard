{# Paragraph view Form #}
<div x-data="{ 
    isRTL: document.dir === 'rtl',
    paragraphViews: [],
    isLoadingViews: true,
    fieldName: '',
    isUpdatingDisplays: false,
    async init() {
        await this.loadParagraphViews();
        await this.updateDisplays();
    },
    async loadParagraphViews() {
        try {
            console.log('paragraphViewForm', this.paragraphViewForm);
            this.isLoadingViews = true;
            const response = await fetch(`{{ path('vactory_dashboard.paragraph_views', {'nid': 'NID', 'pid': 'PID'}) }}`.replace('NID', this.paragraphViewForm.nid).replace('PID', this.paragraphViewForm.pid));
            if (response.ok) {
                const data = await response.json();
                this.paragraphViews = data.data || [];
            } else {
                console.error('Failed to load paragraph views');
                this.paragraphViews = [];
            }
        } catch (error) {
            console.error('Error loading paragraph views:', error);
            this.paragraphViews = [];
        } finally {
            this.isLoadingViews = false;
        }
    },

    async updateDisplays() {
        if (!this.paragraphViewForm.blockType) return;
        try {
            this.isUpdatingDisplays = true;
            const response = await fetch(`{{ path('vactory_dashboard.update_displays', {'vid': 'VID'}) }}`.replace('VID', this.paragraphViewForm.blockType));
            if (response.ok) {
                const data = await response.json();
                this.paragraphViewForm.displays = data.data || [];
                console.log(this.paragraphViewForm.displays);
            } else {
                console.error('Failed to update paragraph displays');
                this.paragraphViewForm.displays = [];
            }
        } catch (error) {
            console.error('Error updating paragraph displays:', error);
            this.paragraphViewForm.displays = [];
        } finally {
            this.isUpdatingDisplays = false;
        }
    },
}" :dir="isRTL ? 'rtl' : 'ltr'">
    <div class="h-full flex flex-col bg-slate-50">
        <div class="sticky top-0 z-10 bg-white rounded-xl py-4 px-6 border-b border-slate-200 flex justify-between items-center mb-6">
            <div class="flex items-center gap-x-3">
                <button @click="showParagraphViewForm = false; paragraphViewForm = { viewType: '', content: '', config: { title: '', show_title: false, width: 'full_width', spacing: '_none', css_classes: '' } }" type="button"
                        class="me-3 text-slate-400 hover:text-primary-500 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                         stroke="currentColor" class="h-4 w-4">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"></path>
                    </svg>
                </button>
                <h1 class="text-lg font-semibold text-slate-900">{{ 'Add view'|t }}</h1>
            </div>
            <div class="max-lg:fixed max-lg:w-full max-lg:bottom-0 max-lg:left-0 max-lg:bg-white max-lg:shadow-lg max-lg:border-t max-lg:border-slate-200 max-lg:p-3 max-lg:[&>*]:w-full max-lg:z-[1] flex items-center gap-x-2">
                {% include '@vactory_admin/components/button/button.twig' with {
                    'variant': 'secondary',
                    'size': 'md',
                    'type': 'button',
                    'text': 'Annuler'|t,
                    'attributes': create_attribute().setAttribute('@click', 'showParagraphViewForm = false; currentBlockIndex = null; paragraphViewForm = { viewType: \'\', content: \'\', config: { title: \'\', show_title: false, width: \'full_width\', spacing: \'_none\', css_classes: \'\' } }')
                } %}
                {% include '@vactory_admin/components/button/button.twig' with {
                    'variant': 'primary',
                    'size': 'md',
                    'type': 'button',
                    'text': 'Enregistrer'|t,
                    'attributes': create_attribute().setAttribute('@click', 'saveParagraphView()')
                } %}
            </div>
        </div>

        <div class="flex-1 overflow-y-auto">
            <div class="mx-auto">
                <form id="paragraph-view-form" @submit.prevent="saveParagraphView()" class="bg-white rounded-xl shadow-sm p-2 lg:p-8">
                    <div class="flex items-start flex-col md:flex-row gap-6">
                        <div class="w-full md:w-2/3">
                            {# Main Form Section #}
                            <div class="mb-8 border-b border-slate-200 p-6 rounded-xl bg-slate-50">
                                <h3 class="text-base font-semibold text-slate-900 mb-4">{{ 'View Content'|t }}</h3>
                                <div class="space-y-4">
                                    {# view Type Select #}
                                    <div>
                                        <label class="view text-sm font-medium text-slate-700 mb-1 required">
                                            {{ 'Relevant view'|t }}
                                            <span class="text-red-500">*</span>
                                        </label>
                                        <select x-model="paragraphViewForm.blockType"
                                                required
                                                @change="updateDisplays()"
                                                class="w-full py-2 px-3 text-sm border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent transition-all duration-150">
                                            <option value="">{{ 'Select View type'|t }}</option>
                                            <template x-if="isLoadingViews">
                                                <option disabled>{{ 'Loading view types...'|t }}</option>
                                            </template>
                                            <template x-if="!isLoadingViews && paragraphViews.length === 0">
                                                <option disabled>{{ 'No view types available'|t }}</option>
                                            </template>
                                            <template x-for="view in paragraphViews" :key="view.id">
                                                <option :selected="view.id == paragraphViewForm.blockType" :value="view.id" x-text="view.label || view.name"></option>
                                            </template>
                                        </select>
                                    </div>

                                    {# Display #}
                                    <div>
                                        <label class="view text-sm font-medium text-slate-700 mb-1 required">
                                            {{ 'Display'|t }}
                                            <span class="text-red-500">*</span>
                                        </label>
                                        <select x-model="paragraphViewForm.displayID"
                                                required
                                                class="w-full py-2 px-3 text-sm border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent transition-all duration-150">
                                            <option value="">{{ 'Select Display'|t }}</option>
                                            <template x-if="isUpdatingDisplays">
                                                <option disabled>{{ 'Loading displays...'|t }}</option>
                                            </template>
                                            <template x-if="!isUpdatingDisplays && paragraphViewForm.displays.length === 0">
                                                <option disabled>{{ 'No displays available'|t }}</option>
                                            </template>
                                            <template x-for="(label, id) in paragraphViewForm.displays" :key="id">
                                                <option :selected="id == paragraphViewForm.displayID" :value="id" x-text="label"></option>
                                            </template>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {# view Configuration Section #}
                        {% include "@vactory_dashboard/_components/paragraph/appearance.html.twig" with {
                            isParagraphMultiple: false,
                            paragraph: 'paragraphViewForm',
                        } %}
                    </div>
                </form>
            </div>
        </div>
        {% include "@vactory_dashboard/_components/media/media-library.html.twig" with {'paragraph': 'paragraphViewForm'} %}
        
        {# Warning Message #}
        <div class="mt-6 p-4 bg-yellow-50 border border-yellow-300 rounded-lg">
            <div class="flex items-start">
                <svg class="h-5 w-5 text-yellow-500 mt-0.5 mr-3 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
                <div>
                    <h4 class="text-sm font-medium text-yellow-800">{{ 'Advanced Configuration Notice'|t }}</h4>
                    <p class="mt-1 text-sm text-yellow-700">{{ 'The advanced view configuration (fields, settings, etc.) must be configured in advanced mode. This form only handles basic content and appearance settings.'|t }}</p>
                </div>
            </div>
        </div>
    </div>
</div> 