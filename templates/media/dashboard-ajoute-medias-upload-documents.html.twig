{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
    <div class="flex-1 overflow-y-auto" x-data="documentsUploader()">
        {% include "@vactory_dashboard/node/_components/message-notification.html.twig" %}
        <div>
            <!-- Titre -->
            <div class="flex items-center gap-x-2 mb-6">
                <a href="javascript:history.back()">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                         stroke="currentColor" class="h-4 w-4">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"></path>
                    </svg>
                </a>
                <div class="sm:flex-auto">
                    <h1 class="text-2xl font-semibold text-gray-900">{{ 'Import de documents en masse' | t }}</h1>
                </div>
            </div>

            <!-- Formulaire -->
            <div class="bg-white shadow sm:rounded-lg p-6">
                <form x-ref="form">

                    <!-- documents upload -->
                    <div class="mb-6">
                        <label for="documents" class="block text-sm font-semibold text-gray-700 mb-1">
                            {{ "Sélectionnez les documents à importer" | t }}<span class="text-red-500">*</span>
                        </label>

                        <div class="flex items-center justify-center w-full h-64 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50 cursor-pointer transition-colors duration-200"
                             x-ref="dropzone"
                             @dragover.prevent="dragOver = true"
                             @dragenter.prevent="dragOver = true"
                             @dragleave.prevent="dragOver = false"
                             @drop.prevent="handleDrop($event)"
                             :class="{'border-primary-500 bg-primary-50': dragOver, 'border-gray-300 bg-gray-50': !dragOver}">
                            <label for="documents" class="w-full h-full flex items-center justify-center">
                                <div class="flex flex-col items-center justify-center py-5 px-3">
                                    <svg class="w-8 h-8 mb-4 text-gray-500" xmlns="http://www.w3.org/2000/svg"
                                         fill="none"
                                         viewbox="0 0 20 16">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                              stroke-width="2"
                                              d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                                    </svg>
                                    <p class="mb-2 text-sm text-gray-500">
                                        <span class="font-semibold">Cliquez pour importer</span>
                                        ou glissez-déposez
                                    </p>
                                    <p class="text-xs text-gray-500">{{ allowed_extensions | join(', ') }}
                                        (max. 20 Mo)</p>
                                </div>


                                <p class="text-sm text-gray-700 truncate" x-text="file"></p>
                        </div>
                        </template>
                    </div>
                    </template>

                    <input name="documents[]" id="documents" type="file" class="hidden" x-ref="fileInput"
                           @change="handleFile" accept="{{ allowed_extensions | map(ext => '.' ~ ext) | join(',') }}"
                           multiple/>
                    </label>
                    <div>

                        <template x-if="fileNames.length > 0">
                            <div class="grid grid-cols-2 lg:grid-cols-6 gap-4 mt-4 overflow-hidden">
                                <template x-for="(file, index) in fileNames" :key="index">
                                    <div
                                            class="relative text-center border rounded-md p-2 bg-white shadow-sm">
                                        <!-- Bouton pour supprimer le fichier -->
                                        <div class="absolute top-2 right-2">
                                            <button type="button" @click="removeFile(index)"
                                                    class="bg-white text-red-500 hover:bg-gray-50 rounded-full p-1 shadow-lg border border-gray-200 transition-all duration-200 ease-in-out transform">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5"
                                                     viewbox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                    <path fill-rule="evenodd"
                                                          d="M6.293 4.293a1 1 0 011.414 0L10 6.586l2.293-2.293a1 1 0 111.414 1.414L11.414 8l2.293 2.293a1 1 0 11-1.414 1.414L10 9.414l-2.293 2.293a1 1 0 11-1.414-1.414L8.586 8 6.293 5.707a1 1 0 010-1.414z"
                                                          clip-rule="evenodd"/>
                                                </svg>
                                            </button>
                                        </div>

                                        <!-- Aperçu de l'image -->
                                        <template x-if="previews[index]">
                                            <img :src="previews[index]"
                                                 class="w-full h-28 object-cover mx-auto mb-2 rounded-md"/>
                                        </template>


                                        <!-- Aperçu si non-image -->
                                        <template x-if="!previews[index]">
                                            <div class="flex items-center justify-center h-32 w-30 bg-gray-100 rounded mb-2">
                                                <svg class="h-8 w-8 text-gray-500 mr-4" fill="none" viewbox="0 0 24 24"
                                                     stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                          stroke-width="2"
                                                          d="M14 3v4a1 1 0 0 0 1 1h4M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2zM9 9h1M9 13h6M9 17h6"/>
                                                </svg>
                                            </div>
                                        </template>

                                        <!-- Nom du fichier -->
                                        <p class="text-xs text-gray-700 truncate" x-text="file"></p>
                                    </div>
                                </template>
                            </div>
                        </template>

                    </div>
                    <template x-if="errors.file">
                        <p class="text-sm text-red-600 mt-2" x-text="errors.file"></p>
                    </template>


                    <!-- Boutons -->
                    <div class="flex justify-end space-x-2 mt-4">
                        {% include "@vactory_admin/components/button/button.twig" with {
                            variant: "secondary",
                            size: "md",
                            text: "Annuler" | t,
                            click_handler: "$refs.form.reset(); fileNames = []; previews = []; history.back()",
                            alpine_attrs: "type='button'"
                        } %}
                        <button
                                @click.prevent="loading = true; submitForm();"
                                :data-is-loading="loading"
                                :disabled="loading"
                                :class="{'opacity-50 cursor-not-allowed': loading,'bg-primary-500 hover:bg-primary-600': !loading,'bg-primary-400': loading}"
                                class="inline-flex items-center justify-center gap-x-2 rounded-lg transition-all duration-150 px-5 py-2 text-sm text-white bg-primary-500 hover:bg-primary-600 shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                            <!-- Button text (changes based on loading state) -->
                            <span x-text="loading ? '{{ 'Ajout...'|t }}' : '{{ 'Ajouter'|t }}'"></span>

                            <!-- Loading spinner (shown when saving) -->
                            <svg x-show="loading" class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg"
                                 fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                        stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor"
                                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
      function documentsUploader() {
        return {
          loading: false,
          errors: {},
          fileNames: [],
          files: [],
          previews: [],
          dragOver: false,

          notification: {
            show: false,
            type: 'success',
            message: '',
            timeout: null,
          },

          showNotification(type, message) {
            if (this.notification.timeout) {
              clearTimeout(this.notification.timeout);
            }
            this.notification.type = type;
            this.notification.message = message;
            this.notification.show = true;
            this.notification.timeout = setTimeout(() => {
              this.notification.show = false;
            }, 5000);
          },

          sanitizeFilename(filename) {
            // Replace problematic characters with safe alternatives
            return filename
              .replace(/['"]/g, '') // Remove quotes and apostrophes
              .replace(/[^\w\s.-]/g, '_') // Replace other special chars with underscore
              .replace(/\s+/g, '_') // Replace multiple spaces with single underscore
              .replace(/_+/g, '_') // Replace multiple underscores with single underscore
              .replace(/^_|_$/g, ''); // Remove leading/trailing underscores
          },

          handleFile(event) {
            const files = this.$refs.fileInput.files;
            const validTypes = {{ allowed_extensions | json_encode | raw }};
            for (const file of files) {
              const ext = file.name.split('.').pop().toLowerCase();

              if (!validTypes.includes(ext)) {
                this.errors.file = "{{ 'Extension non autorisée.' | t }}";
                continue;
              }

              if (file.size > 20 * 1024 * 1024) {
                this.errors.file = "{{ 'Le fichier dépasse la taille maximale de 20 Mo.' | t }}";
                continue;
              }

              // Create a new file with sanitized name if needed
              const sanitizedName = this.sanitizeFilename(file.name);
              if (sanitizedName !== file.name) {
                // Create a new File object with the sanitized name
                const sanitizedFile = new File([file], sanitizedName, { type: file.type });
                this.fileNames.push(sanitizedName);
                this.files.push(sanitizedFile);
              } else {
                this.fileNames.push(file.name);
                this.files.push(file);
              }

              const currentIndex = this.previews.length;
              this.previews.push(null); // Réserve une place

              if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = (e) => {
                  this.previews[currentIndex] = e.target.result;
                };
                reader.readAsDataURL(file);
              }
            }
            if (this.fileNames.length === 0) {
              this.errors.file = "{{ 'Aucun fichier valide sélectionné.' | t }}";
            } else {
              this.errors.file = null;
            }
            this.$refs.fileInput.value = null;
          },

          removeFile(index) {
            this.fileNames.splice(index, 1);
            this.files.splice(index, 1);
            this.previews.splice(index, 1);
          },

          handleDrop(event) {
            this.dragOver = false;
            const droppedFiles = event.dataTransfer.files;
            const validTypes = {{ allowed_extensions | json_encode | raw }};

            if (droppedFiles.length > 0) {
              // Process each dropped file
              for (const file of droppedFiles) {
                const ext = file.name.split('.').pop().toLowerCase();

                // Validate file extension
                if (!validTypes.includes(ext)) {
                  this.errors.file = "{{ 'Extension non autorisée.' | t }}";
                  continue;
                }

                // Validate file size (20MB max)
                if (file.size > 20 * 1024 * 1024) {
                  this.errors.file = "{{ 'Le fichier dépasse la taille maximale de 20 Mo.' | t }}";
                  continue;
                }

                // Create a new file with sanitized name if needed
                const sanitizedName = this.sanitizeFilename(file.name);
                if (sanitizedName !== file.name) {
                  // Create a new File object with the sanitized name
                  const sanitizedFile = new File([file], sanitizedName, { type: file.type });
                  this.fileNames.push(sanitizedName);
                  this.files.push(sanitizedFile);
                } else {
                  this.fileNames.push(file.name);
                  this.files.push(file);
                }

                const currentIndex = this.previews.length;
                this.previews.push(null); // Reserve a spot

                // Generate preview for image files
                if (file.type.startsWith('image/')) {
                  const reader = new FileReader();
                  reader.onload = (e) => {
                    this.previews[currentIndex] = e.target.result;
                  };
                  reader.readAsDataURL(file);
                }
              }

              // Update the file input with all files
              const dataTransfer = new DataTransfer();
              for (const file of this.files) {
                dataTransfer.items.add(file);
              }
              this.$refs.fileInput.files = dataTransfer.files;

              // Clear errors if files are valid
              if (this.fileNames.length > 0) {
                this.errors.file = null;
              }
            }
          },

          async submitForm() {
            this.loading = true;
            this.errors = {};

            if (this.files.length === 0) {
              this.errors.file = "{{ 'Veuillez sélectionner un document.' | t }}";
              this.loading = false;
              this.showNotification('error', '{{ "Veuillez vérifier les valeurs fournies."|t }}');
              return;
            }

            const formData = new FormData(this.$refs.form);

            // Debug: Log what's in the FormData initially
            console.log('Initial FormData contents:');
            for (let [key, value] of formData.entries()) {
              console.log(key, value);
            }

            // Remove any existing documents[] entries and add our files
            formData.delete('documents[]');

            // Ajouter chaque fichier de la liste locale au FormData
            for (let i = 0; i < this.files.length; i++) {
              const file = this.files[i];
              console.log('Adding file to FormData:', {
                name: file.name,
                size: file.size,
                type: file.type,
                lastModified: file.lastModified,
              });
              formData.append('documents[]', file);
            }

            // Debug: Log final FormData contents
            console.log('Final FormData contents:');
            for (let [key, value] of formData.entries()) {
              console.log(key, value);
            }

            try {
              const response = await fetch('/api/vactory-dashboard/media/add-documents', {
                method: 'POST',
                body: formData,
              });

              const result = await response.json();
              console.log('API Response:', {
                status: response.status,
                ok: response.ok,
                result: result,
              });

              if (!response.ok) {
                this.errors = result.errors || {};
                console.error('Upload failed:', result);
                this.showNotification('error', '{{ "Veuillez vérifier les valeurs fournies."|t }}');
              } else { // Redirection ou autre action après succès
                console.log('Upload successful:', result);
                this.showNotification('success', '{{ "Documents ajouté avec succes"|t }}');
                window.location.href = '{{ path("vactory_dashboard.media") }}';
              }
            } catch (error) {
              console.error('Erreur :', error);
              this.showNotification('error', '{{ "Une erreur est survenue"|t }}');
            } finally {
              this.loading = false;
            }
          },
        };
      }
    </script>
{% endblock %}
