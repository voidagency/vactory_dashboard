{% extends "@vactory_dashboard/_layout/main-content-layout.html.twig" %}

{% block content %}
	<div x-data="mediaData()">
		<div class="mb-6">
			<h1 class="text-2xl font-semibold text-gray-900">{{"Médiathèque"|t}}</h1>
		</div>

		<div class="mb-6 bg-white p-3 lg:p-6 rounded-xl shadow-sm border border-gray-100 flex flex-col flex-wrap lg:flex-row justify-between gap-4">
			<div class="flex flex-wrap items-center gap-4">
				<div class="relative flex-1 min-w-[280px]">
					<input type="text" 
                           x-model="filters.search" 
                           @input.debounce.300ms="loadMedia()" 
                           placeholder="Rechercher un média..." 
                           class="w-full pl-10 pr-4 py-[7px] bg-gray-50 border border-gray-200 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 placeholder:text-gray-400 text-sm leading-6">
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
						</svg>
					</div>
				</div>

                <div class="relative">
                    <select x-model="filters.type" 
                            @change="loadMedia()"
                            class="min-w-[200px] bg-gray-50 border border-gray-200 pl-4 pr-10 py-[7px] rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 appearance-none">
                        <option value="">{{ "Tous les types" | t }}</option>
                        {% for type_id, type_label in media_types %}
                            <option value="{{ type_id }}">{{ type_label }}</option>
                        {% endfor %}
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </div>
                </div>

				<div class="flex bg-gray-50 rounded-lg p-1 gap-1 border border-gray-200">
                    <button @click="viewMode = 'grid'"
                            :class="{ 'bg-white shadow-sm': viewMode === 'grid' }"
                            class="p-[5px] rounded-md hover:bg-gray-100 transition-all duration-200">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewbox="0 0 20 20" fill="currentColor">
							<path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
						</svg>
					</button>
					<button @click="viewMode = 'list'"
                            :class="{ 'bg-white shadow-sm': viewMode === 'list' }"
                            class="p-[5px] rounded-md hover:bg-gray-100 transition-all duration-200">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewbox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
						</svg>
					</button>                    
				</div>
			</div>
			<div class="max-lg:fixed max-lg:w-full max-lg:bottom-0 max-lg:left-0 max-lg:bg-white max-lg:shadow-lg max-lg:border-t max-lg:border-slate-200 max-lg:p-3 max-lg:[&>*]:w-full max-lg:z-[1] max-lg:flex-col flex items-center gap-3">
				<a href="{{ path('vactory_dashboard_ajoute_medias_upload_documents') }}" 
                   class="group w-full text-left px-4 text-sm font-semibold hover:bg-gray-100 rounded-lg transition-all duration-200 flex items-center justify-between border border-gray-300 hover:border-gray-200 hover:shadow-sm h-10 whitespace-nowrap text-gray-700">
                    <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
                        </svg>
                        Ajouter média en masse
                    </span>
                </a>
				<a href="{{ path('vactory_dashboard_ajoute_media') }}" 
                   class="group relative w-full text-left px-4 text-sm font-semibold text-white bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 rounded-lg shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-between overflow-hidden h-10">
                    <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
                        </svg>
                        Ajouter un média
                    </span>
                </a>
			</div>
		</div>

        <!-- Simple Notification Toast -->
        <div x-show="notification.show"
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 translate-y-2"
             x-transition:enter-end="opacity-100 translate-y-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100"
             x-transition:leave-end="opacity-0"
             class="fixed top-4 right-4 z-50 bg-white rounded-lg shadow-lg p-3 border border-gray-200"
             style="display: none;">
            <p class="text-sm text-gray-900" x-text="notification.message"></p>
        </div>

        <!-- Loading state -->
        <template x-if="loading">
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
            </div>
        </template>

        <!-- Error state -->
        <template x-if="error">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span x-text="error"></span>
            </div>
        </template>

        <!-- Empty state -->
        <template x-if="!loading && !error && items.length === 0">
            <div class="text-center py-12">
                <h3 class="mt-2 text-sm font-medium text-gray-900">{{ "Aucun média" | t }}</h3>
                <p class="mt-1 text-sm text-gray-500">{{ "Commencez par ajouter un média" | t }}</p>
            </div>
        </template>

        <!-- Grid view -->
        <template x-if="!loading && !error && items.length > 0 && viewMode === 'grid'">

			<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
				<template x-for="media in items" :key="media.id">
					<div class="bg-white rounded-lg shadow overflow-hidden">
						<div class="aspect-w-16  bg-gray-100">
							<template x-if="media.type === 'video'">
								<div class="flex items-center justify-center">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" viewbox="0 0 20 20" fill="currentColor">
										<path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"/>
									</svg>
								</div>
							</template>
							<template x-if="media.type === 'image'">
								<a :href="media.url" target="_blank">
									<img loading="lazy" :src="media.url" :alt="media.name" class="object-cover w-full h-32 hover:opacity-80 transition duration-200">
								</a>
							</template>

                            <template x-if="media.type === 'file'">
                                <div class="flex items-center  justify-center h-32 ">
                                    <a :href="media.url" target="_blank">
                                        <svg xmlns="http://www.w3.org/2000/svg"
                                             class="h-12 w-12 text-gray-400 items-center  justify-center"
                                             viewbox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd"
                                                  d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"
                                                  clip-rule="evenodd"/>
                                        </svg>
                                    </a>
                                </div>
                            </template>
                            <template x-if="media.type === 'remote_video'">
                                <div class="flex items-center  h-32   justify-center">
                                    <a :href="media.url" target="_blank">
                                        <svg class="h-20 w-8 text-gray-500 items-center  justify-center"
                                             viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                             stroke-linecap="round" stroke-linejoin="round">
                                            <polygon points="23 7 16 12 23 17 23 7"/>
                                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                                        </svg>
                                    </a>
                                </div>
                            </template>
                        </div>
                        <div class="p-4">
                            <div class="flex items-center justify-between">
                                <h3 class="text-sm font-medium text-gray-900 truncate flex-1 mr-2" x-text="media.name"></h3>
                                <button @click="copyToClipboard(media.url, media.name, media.id)"
                                        :title="'Copier l\'URL de ' + media.name"
                                        :class="recentlyCopied === media.id ? 'text-green-600 bg-green-50 scale-105' : 'text-gray-400 hover:text-primary-600 hover:bg-primary-50'"
                                        class="flex-shrink-0 p-1.5 rounded-md transition-all duration-200 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-1 group">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </template>


        <div x-show="selectedItems.length > 0" x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform -translate-y-2"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform translate-y-0"
             x-transition:leave-end="opacity-0 transform -translate-y-2" class="mb-6">
            <div class="bg-white px-4 py-3 sm:px-6 shadow-sm ring-1 ring-gray-900/5 sm:rounded-lg">
                <div class="flex items-center justify-between">
                    <div class="text-sm text-gray-900">
                        <span x-text="selectedItems.length"></span>
                        {{ "élément(s) sélectionné(s)" | t }}
                    </div>
                    <button type="button" @click="showDeleteModal = true"
                            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                        {{ "Supprimer la sélection" | t }}
                    </button>
                </div>
            </div>
        </div>


        <!-- List view -->
        <template x-if="!loading && !error && items.length > 0 && viewMode === 'list'">
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
                <ul role="list" class="divide-y divide-gray-200">
                    <template x-for="media in items" :key="media.id">
                        <li
                                class="px-6 py-4 flex items-center">
                            <!-- Case à cocher -->
                            {% if user.hasPermission('delete any media') %}
                                <input type="checkbox" x-model="selectedItems" :value="media.id"
                                       class="h-4 w-4 text-primary-600 border-gray-300 rounded mr-4">
                            {% endif %}
                            <div class="flex-shrink-0 h-12 w-12 bg-gray-100 rounded-md overflow-hidden">


                                <template x-if="media.type === 'image'">
                                    <a :href="media.url" target="_blank">
                                        <img loading="lazy" :src="media.url" :alt="media.name" class="object-cover h-full w-full">
                                    </a>
                                </template>
                                <template x-if="media.type === 'file'">
                                    <div class="flex items-center justify-center h-full">
                                        <a :href="media.url" target="_blank">
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 class="h-6 w-6 text-gray-400 items-center  justify-center"
                                                 viewbox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd"
                                                      d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"
                                                      clip-rule="evenodd"/>
                                            </svg>
                                        </a>
                                    </div>
                                </template>
                                <template x-if="media.type === 'remote_video'">
                                    <div class="flex items-center justify-center h-full">
                                        <a :href="media.url" target="_blank">
                                            <svg class="h-6 w-8 text-gray-500 items-center  justify-center"
                                                 viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                                 stroke-linecap="round" stroke-linejoin="round">
                                                <polygon points="23 7 16 12 23 17 23 7"/>
                                                <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                                            </svg>
                                        </a>
                                    </div>
                                </template>

                            </div>
                            <div class="ml-4 flex-1">
                                <div class="flex items-center justify-between">
                                    <h3 class="text-sm font-medium text-gray-900 flex-1 mr-2" x-text="media.name"></h3>
                                    <button @click="copyToClipboard(media.url, media.name, media.id)"
                                            :title="'Copier l\'URL de ' + media.name"
                                            :class="recentlyCopied === media.id ? 'text-green-600 bg-green-50 scale-105' : 'text-gray-400 hover:text-primary-600 hover:bg-primary-50'"
                                            class="flex-shrink-0 p-1.5 rounded-md transition-all duration-200 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-1 group">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </li>
                    </template>
                </ul>
            </div>
        </template>
        <!-- Pagination -->
        <template x-if="totalPages > 1">
        <div class="mt-6 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
            {# <div class="flex flex-1 justify-between sm:hidden">
                <button @click="loadMedia(currentPage - 1)" :disabled="currentPage === 1"
                        class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                        :class="{ 'opacity-50 cursor-not-allowed': currentPage === 1 }">
                    Précédent
                </button>
                <button @click="loadMedia(currentPage + 1)" :disabled="currentPage === totalPages"
                        class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                        :class="{ 'opacity-50 cursor-not-allowed': currentPage === totalPages }">
                    Suivant
                </button>
            </div> #}
            <div class="flex max-lg:flex-wrap max-lg:gap-3 max-lg:justify-center flex-1 items-center justify-between">
                <div>
                    <p class="text-sm text-gray-700">
                        Affichage de
                        <span class="font-medium" x-text="((currentPage - 1) * limit) + 1"></span>
                        à
                        <span class="font-medium" x-text="Math.min(currentPage * limit, total)"></span>
                        sur
                        <span class="font-medium" x-text="total"></span>
                        résultats
                    </p>
                </div>
                <div>
                    <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                        <button @click="loadMedia(currentPage - 1)" :disabled="currentPage === 1"
                                class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
                                :class="{ 'opacity-50 cursor-not-allowed': currentPage === 1 }">
                            <span class="sr-only">Précédent</span>
                            <svg class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                      d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </button>
                        <template x-for="page in pages">
                            <button @click="loadMedia(page)"
                                    :class="{ 'bg-primary-500 text-white': currentPage === page, 'text-gray-900': currentPage !== page }"
                                    class="relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                                <span x-text="page"></span>
                            </button>
                        </template>
                        <button @click="loadMedia(currentPage + 1)" :disabled="currentPage === totalPages"
                                class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
                                :class="{ 'opacity-50 cursor-not-allowed': currentPage === totalPages }">
                            <span class="sr-only">Suivant</span>
                            <svg class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd"
                                      d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                                      clip-rule="evenodd"/>
                            </svg>
                        </button>
                    </nav>
                </div>
            </div>
        </div>
        </template>
        <!-- Modal -->
        {% include "@vactory_dashboard/_components/modals/delete-confirmation-modal.html.twig" with {
            show_var: 'showDeleteModal',
            confirm_action: 'deleteSelectedItems',
            title: 'Confirmer la suppression'|t,
            message: 'Êtes-vous sûr de vouloir supprimer les médias ?'|t,
            confirm_text: 'Supprimer'|t,
            cancel_text: 'Annuler'|t
        } %}

    </div>
{% endblock %}
{% block javascripts %}
    <script>
      function mediaData() {
        return {
          items: [],
          currentPage: 1,
          totalPages: 1,
          total: 0,
          loading: true,
          error: null,
          viewMode: 'grid',
          showAddModal: false,
          filters: {
            search: '',
            type: '',
          },
          limit: Alpine.store('limit'),
          pages: [],
          selectedItems: [],
          showDeleteModal: false,
          mediaToDelete: null,
          // Simple notification for copy feedback
          notification: {
            show: false,
            message: ''
          },
          // Track which button was recently clicked for visual feedback
          recentlyCopied: null,
          async loadMedia(page = 1) {
            this.currentPage = page;
            this.loading = true;
            this.error = null;

            const params = new URLSearchParams({ page: page, limit: this.limit, search: this.filters.search, type: this.filters.type });

            try {
              const response = await fetch(`{{ path('vactory_dashboard.media.data') }}?${
                params.toString()
              }`);
              if (!response.ok) {
                throw new Error('{{ "Une erreur est survenue lors du chargement des médias" | t }}');
              }

              const data = await response.json();

              this.items = data.data;
              this.total = data.total;
              this.totalPages = data.pages;
              this.pages = this.generatePageNumbers(data.page, data.pages);
            } catch (error) {
              console.error('Error loading media:', error);
              this.error = error.message;
              this.items = [];
            } finally {
              this.loading = false;
            }
          },

          async deleteMedia(id) {
            try {
              const response = await fetch('/api/vactory-dashboard/media/delete', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id }),
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erreur lors de la suppression.');
              }

              // Supprimez l'élément localement
              this.items = this.items.filter(item => item.id !== id);
            } catch (error) {
              console.error('Erreur :', error);
              alert(error.message || 'Une erreur est survenue lors de la suppression.');
            }
          },

          async deleteSelectedItems() {
            try {
              const response = await fetch('/api/vactory-dashboard/media/delete-multiple', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(
                  { ids: this.selectedItems },
                ),
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erreur lors de la suppression.');
              }

              if (this.currentPage > 1 && (this.items.length - this.selectedItems.length) == 0) {
                  this.currentPage -= 1;
              }
              await this.$nextTick();

              // Supprimez les éléments localement
              this.items = this.items.filter(item => !this.selectedItems.includes(item.id));
              this.selectedItems = [];

              // Rechargez les données depuis le serveur
              await this.loadMedia(this.currentPage);
            } catch (error) {
              console.error('Erreur :', error);
              alert(error.message || 'Une erreur est survenue lors de la suppression.');
            }
          },

          generatePageNumbers(currentPage, totalPages) {
            const pages = [];
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
              startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
              pages.push(i);
            }

            return pages;
          },

          async copyToClipboard(url, mediaName, mediaId) {
            // Set visual feedback immediately
            this.recentlyCopied = mediaId;
            try {
              // Modern Clipboard API
              await navigator.clipboard.writeText(url);
              this.showNotification(`URL de "${mediaName}" copiée dans le presse-papiers !`);
            } catch (error) {
              // Fallback for browsers that don't support clipboard API or HTTPS
              const textArea = document.createElement('textarea');
              textArea.value = url;
              textArea.style.position = 'fixed';
              textArea.style.left = '-999999px';
              textArea.style.top = '-999999px';
              document.body.appendChild(textArea);
              textArea.focus();
              textArea.select();
              try {
                const successful = document.execCommand('copy');
                if (successful) {
                  this.showNotification(`URL de "${mediaName}" copiée dans le presse-papiers !`);
                }
              } catch (fallbackError) {
                // Silently fail - user will see button feedback
              }
              document.body.removeChild(textArea);
            }
            // Reset visual feedback after 1 second
            setTimeout(() => {
              this.recentlyCopied = null;
            }, 1000);
          },
          showNotification(message) {
            this.notification.message = message;
            this.notification.show = true;
            // Auto-hide notification after 2 seconds
            setTimeout(() => {
              this.notification.show = false;
            }, 2000);
          },

          init() {
            this.loadMedia();
          },
        };
      }
    </script>
{% endblock %}
